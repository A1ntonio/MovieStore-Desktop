/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moviestore;

import java.awt.Desktop;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Add_or_edit_series extends javax.swing.JFrame {

    /**
     * Creates new form Add_or_edit
     */
    
    Connection conn = (Connection) Connectivity.openConnection();
    long totalSize = 0;
    long kilobyte;
    String strings;
    int ids;
    boolean tf = false;
    private String genre;
    private String folder_path = "C:\\Users\\user\\Desktop";
    private String imageFullPath;
    private String priviewPath = "C:\\";
    private String priviewPath2 = "C:\\";
    boolean update;
    
    public Add_or_edit_series(String strings, int ids, String listName, boolean update) {
        this.strings = strings;
        this.ids = ids;
        this.update = update;
        initComponents();
        setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        
        if(strings == null){
            if(listName != null){
                selectJList(listName);
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        title_field = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        year = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        folderPath = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        scannedFiles = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Series Movies");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/folder_movies_icon_7.png")).getImage());
        setMinimumSize(new java.awt.Dimension(997, 511));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Title");

        title_field.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
        title_field.setToolTipText("Title");
        title_field.setDragEnabled(true);
        title_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                title_fieldActionPerformed(evt);
            }
        });
        if(ids == 0){
            title_field.setDropTarget(new DropTarget() {
                public synchronized void drop(DropTargetDropEvent evt){

                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    try {
                        List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                        for(File file : droppedfile){
                            tf = false;

                            folder_path = file.getPath();
                            folderPath.setText(file.getPath());
                            if(file.isDirectory()){
                                if(strings == null){
                                    title_field.setText(file.getName());
                                    String chara = file.getName();
                                    int check = file.getName().length();
                                    int i = 0;
                                    String ch = "'";
                                    char[] c = ch.toCharArray();
                                    char cc = c[0];
                                    String renamedValue;
                                    while(i<check){
                                        if(chara.charAt(i)==cc){

                                            renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                            if(renamedValue != null){
                                                File renamingFile = new File(file.getPath());
                                                renamingFile.renameTo(new File(file.getParent()+"\\"+renamedValue));
                                                    title_field.setText(renamedValue);
                                                    folderPath.setText(file.getParent()+"\\"+renamedValue);
                                                        tf = true;
                                                        JOptionPane.showMessageDialog(Add_or_edit_series.this, "Folder "+file.getName()+ " renamed to " + renamedValue+".\n Please choose the folder again from the file explorar.");
                                                    }else{
                                                        title_field.setText("");
                                                        folderPath.setText("");
                                                        tf = false;
                                                    }

                                                }
                                                i++;
                                            }

                                        }
                                        if(!tf){
                                            Object[] fils = null;
                                            try {
                                                fils = Files.walk(Paths.get(file.getPath())).filter(Files::isRegularFile).toArray();

                                            } catch (IOException ex) {
                                                JOptionPane.showMessageDialog(Add_or_edit_series.this, ex.getMessage());
                                            }
                                            scannedFiles.setText(fils.length+" file selected!");
                                            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                                            String[] strg = new String[8];
                                            int j = 0;
                                            for(Object files : fils){
                                                File newfile = new File(files.toString());
                                                String ext2 = "";
                                                int d = newfile.getName().lastIndexOf('.');
                                                if (d > 0){
                                                    ext2 = newfile.getName().substring(d+1);
                                                }
                                                switch (ext2) {
                                                    case "mp3": case "MP3":
                                                    case "wav": case "WAV":
                                                    case "AAC": case "aac":
                                                    case "AC3": case "ac3":
                                                    case "AIF": case "aif":
                                                    case "AIFF": case "aiff":
                                                    case "AU": case "au":
                                                    case "FLAC": case "flac":
                                                    case "M4A": case "m4a":
                                                    case "MKA": case "mka":
                                                    case "MP2": case "mp2":
                                                    case "OGG": case "ogg":
                                                    case "WMA": case "wma":
                                                    case "mp4":
                                                    case "MP4":
                                                    case "avi":
                                                    case "AVI":
                                                    case "mkv":
                                                    case "MKV":
                                                    case "mov":
                                                    case "MOV":
                                                    case "flv": case "FLV":
                                                    case "vob": case "VOB":
                                                    case "3gp": case "3GP":
                                                    case "ASF": case "asf":
                                                    case "f4v": case "F4V":
                                                    case "M4V": case "m4v":
                                                    case "mpg": case "MPG":
                                                    case "MPEG": case "mpeg":
                                                    case "dpg": case "DPG":
                                                    case "DV": case "dv":

                                                    strg[0] = newfile.getName();
                                                    String bytes = String.valueOf(newfile.length());
                                                    long flo_byte = Long.parseLong(bytes);
                                                    long kilobyte1 = Math.round(flo_byte/1024);
                                                    strg[1] = (String.valueOf(kilobyte1));

                                                    String ext1 = "";
                                                    int i = newfile.getName().lastIndexOf('.');
                                                    if (i > 0){
                                                        ext1 = newfile.getName().substring(i+1);
                                                    }
                                                    strg[2] = ext1;
                                                    strg[7] = newfile.getAbsolutePath();
                                                    String chara = newfile.getName();
                                                    int check = newfile.getName().length();
                                                    int h = 0;
                                                    String ch = "'";
                                                    char[] c = ch.toCharArray();
                                                    char cc = c[0];
                                                    boolean g = true;
                                                    while(h<check){
                                                        if(chara.charAt(h)==cc){
                                                            String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                                            if(renamedValue != null){
                                                                File renamingFile = new File(newfile.getPath());
                                                                renamingFile.renameTo(new File(folderPath.getText()+"\\"+renamedValue+"."+ext1));
                                                                    strg[0] = renamedValue;
                                                                    strg[7] = folderPath.getText()+"\\"+renamedValue+"."+ext1;
                                                                    tf = true;
                                                                    g = true;
                                                                }else{
                                                                    g = false;
                                                                    tf = false;
                                                                }
                                                            }
                                                            h++;
                                                        }
                                                        if(g){
                                                            model.addRow(strg);
                                                        }

                                                        totalSize = totalSize + newfile.length();

                                                        break;
                                                        default:
                                                        break;
                                                    }

                                                }
                                                totalSize = Math.round(totalSize/1024);
                                            }
                                        }else{
                                            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

                                            String[] strg = new String[8];
                                            strg[0] = file.getName();

                                            String bytes = String.valueOf(file.length());
                                            long flo_byte = Long.parseLong(bytes);
                                            long kilobyte1 = Math.round(flo_byte/1024);
                                            strg[1] = (String.valueOf(kilobyte1));

                                            String ext1 = "";
                                            int i = file.getName().lastIndexOf('.');
                                            if (i > 0){
                                                ext1 = file.getName().substring(i+1);
                                            }
                                            strg[2] = ext1;
                                            strg[7] = file.getAbsolutePath();
                                            String chara = file.getName();
                                            int check = file.getName().length();
                                            int h = 0;
                                            String ch = "'";
                                            char[] c = ch.toCharArray();
                                            char cc = c[0];
                                            boolean t = true;
                                            while(h<check){
                                                if(chara.charAt(h)==cc){
                                                    String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                                    if(renamedValue != null){
                                                        File renamingFile = new File(file.getPath());
                                                        renamingFile.renameTo(new File(file.getParent()+"\\"+renamedValue+"."+ext1));
                                                            strg[0] = renamedValue;
                                                            strg[7] = file.getParent()+"\\"+renamedValue+"."+ext1;
                                                            tf = true;
                                                            t = true;
                                                        }else{
                                                            tf = false;
                                                            t = false;
                                                        }
                                                    }
                                                    h++;
                                                }
                                                if(t){
                                                    model.addRow(strg);
                                                }

                                                folderPath.setText(file.getParent());
                                                scannedFiles.setText("1 file selected!");

                                                for(int k = 0; k < jTable2.getRowCount(); k++){
                                                    totalSize = totalSize + Long.parseLong(String.valueOf(jTable2.getValueAt(k, 1)));
                                                }

                                            }
                                            kilobyte = totalSize;

                                        }
                                    } catch (UnsupportedFlavorException ex) {
                                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            });
                        }

                        if(ids!=0){
                            title_field.setEditable(false);
                        }

                        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                        jLabel3.setText("Year");

                        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/es_file_explorer_20px.png"))); // NOI18N
                        jButton5.setText("File Explorare");
                        jButton5.setToolTipText("Choose files from file explorere");
                        jButton5.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton5ActionPerformed(evt);
                            }
                        });
                        if(ids != 0){
                            jButton5.setEnabled(false);
                        }

                        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/download_from_cloud_25px.png"))); // NOI18N
                        jButton4.setText("Download from Internet");
                        jButton4.setToolTipText("Download from Internet");
                        jButton4.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton4ActionPerformed(evt);
                            }
                        });

                        year.setToolTipText("Media created year");

                        jButton1.setText("Cancel");
                        jButton1.setToolTipText("cancel");
                        jButton1.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton1ActionPerformed(evt);
                            }
                        });

                        jButton2.setText("Import");
                        jButton2.setToolTipText("Import files");
                        jButton2.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jButton2ActionPerformed(evt);
                            }
                        });

                        jTable2.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
                        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                            new Object [][] {

                            },
                            new String [] {
                                "Title", "Size", "Type of file", "Year", "Language", "Season", "Episode", "Path"
                            }
                        ) {
                            boolean[] canEdit = new boolean [] {
                                false, false, false, true, true, true, true, false
                            };

                            public boolean isCellEditable(int rowIndex, int columnIndex) {
                                return canEdit [columnIndex];
                            }
                        });
                        jTable2.setToolTipText("Press [Delete] key to delete single item");
                        jTable2.setDragEnabled(true);
                        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
                            public void keyPressed(java.awt.event.KeyEvent evt) {
                                jTable2KeyPressed(evt);
                            }
                        });
                        jScrollPane2.setViewportView(jTable2);
                        if(ids == 0){
                            jTable2.setDropTarget(new DropTarget() {
                                public synchronized void drop(DropTargetDropEvent evt){

                                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                                    try {
                                        List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                                        for(File file : droppedfile){
                                            tf = false;

                                            folder_path = file.getPath();
                                            folderPath.setText(file.getPath());
                                            if(file.isDirectory()){
                                                if(strings == null){
                                                    title_field.setText(file.getName());
                                                    String chara = file.getName();
                                                    int check = file.getName().length();
                                                    int i = 0;
                                                    String ch = "'";
                                                    char[] c = ch.toCharArray();
                                                    char cc = c[0];
                                                    String renamedValue;
                                                    while(i<check){
                                                        if(chara.charAt(i)==cc){

                                                            renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                                            if(renamedValue != null){
                                                                File renamingFile = new File(file.getPath());
                                                                renamingFile.renameTo(new File(file.getParent()+"\\"+renamedValue));
                                                                    title_field.setText(renamedValue);
                                                                    folderPath.setText(file.getParent()+"\\"+renamedValue);
                                                                        tf = true;
                                                                        JOptionPane.showMessageDialog(Add_or_edit_series.this, "Folder "+file.getName()+ " renamed to " + renamedValue+".\n Please choose the folder again from the file explorar.");
                                                                    }else{
                                                                        title_field.setText("");
                                                                        folderPath.setText("");
                                                                        tf = false;
                                                                    }

                                                                }
                                                                i++;
                                                            }

                                                        }
                                                        if(!tf){
                                                            Object[] fils = null;
                                                            try {
                                                                fils = Files.walk(Paths.get(file.getPath())).filter(Files::isRegularFile).toArray();

                                                            } catch (IOException ex) {
                                                                JOptionPane.showMessageDialog(Add_or_edit_series.this, ex.getMessage());
                                                            }
                                                            scannedFiles.setText(fils.length+" file selected!");
                                                            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                                                            String[] strg = new String[8];
                                                            int j = 0;
                                                            for(Object files : fils){
                                                                File newfile = new File(files.toString());
                                                                String ext2 = "";
                                                                int d = newfile.getName().lastIndexOf('.');
                                                                if (d > 0){
                                                                    ext2 = newfile.getName().substring(d+1);
                                                                }
                                                                switch (ext2) {
                                                                    case "mp3": case "MP3":
                                                                    case "wav": case "WAV":
                                                                    case "AAC": case "aac":
                                                                    case "AC3": case "ac3":
                                                                    case "AIF": case "aif":
                                                                    case "AIFF": case "aiff":
                                                                    case "AU": case "au":
                                                                    case "FLAC": case "flac":
                                                                    case "M4A": case "m4a":
                                                                    case "MKA": case "mka":
                                                                    case "MP2": case "mp2":
                                                                    case "OGG": case "ogg":
                                                                    case "WMA": case "wma":
                                                                    case "mp4":
                                                                    case "MP4":
                                                                    case "avi":
                                                                    case "AVI":
                                                                    case "mkv":
                                                                    case "MKV":
                                                                    case "mov":
                                                                    case "MOV":
                                                                    case "flv": case "FLV":
                                                                    case "vob": case "VOB":
                                                                    case "3gp": case "3GP":
                                                                    case "ASF": case "asf":
                                                                    case "f4v": case "F4V":
                                                                    case "M4V": case "m4v":
                                                                    case "mpg": case "MPG":
                                                                    case "MPEG": case "mpeg":
                                                                    case "dpg": case "DPG":
                                                                    case "DV": case "dv":

                                                                    strg[0] = newfile.getName();
                                                                    String bytes = String.valueOf(newfile.length());
                                                                    long flo_byte = Long.parseLong(bytes);
                                                                    long kilobyte1 = Math.round(flo_byte/1024);
                                                                    strg[1] = (String.valueOf(kilobyte1));

                                                                    String ext1 = "";
                                                                    int i = newfile.getName().lastIndexOf('.');
                                                                    if (i > 0){
                                                                        ext1 = newfile.getName().substring(i+1);
                                                                    }
                                                                    strg[2] = ext1;
                                                                    strg[7] = newfile.getAbsolutePath();
                                                                    String chara = newfile.getName();
                                                                    int check = newfile.getName().length();
                                                                    int h = 0;
                                                                    String ch = "'";
                                                                    char[] c = ch.toCharArray();
                                                                    char cc = c[0];
                                                                    boolean g = true;
                                                                    while(h<check){
                                                                        if(chara.charAt(h)==cc){
                                                                            String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                                                            if(renamedValue != null){
                                                                                File renamingFile = new File(newfile.getPath());
                                                                                renamingFile.renameTo(new File(folderPath.getText()+"\\"+renamedValue+"."+ext1));
                                                                                    strg[0] = renamedValue;
                                                                                    strg[7] = folderPath.getText()+"\\"+renamedValue+"."+ext1;
                                                                                    tf = true;
                                                                                    g = true;
                                                                                }else{
                                                                                    g = false;
                                                                                    tf = false;
                                                                                }
                                                                            }
                                                                            h++;
                                                                        }
                                                                        if(g){
                                                                            model.addRow(strg);
                                                                        }

                                                                        totalSize = totalSize + newfile.length();

                                                                        break;
                                                                        default:
                                                                        break;
                                                                    }

                                                                }
                                                                totalSize = Math.round(totalSize/1024);
                                                            }
                                                        }else{
                                                            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();

                                                            String[] strg = new String[8];
                                                            strg[0] = file.getName();

                                                            String bytes = String.valueOf(file.length());
                                                            long flo_byte = Long.parseLong(bytes);
                                                            long kilobyte1 = Math.round(flo_byte/1024);
                                                            strg[1] = (String.valueOf(kilobyte1));

                                                            String ext1 = "";
                                                            int i = file.getName().lastIndexOf('.');
                                                            if (i > 0){
                                                                ext1 = file.getName().substring(i+1);
                                                            }
                                                            strg[2] = ext1;
                                                            strg[7] = file.getAbsolutePath();
                                                            String chara = file.getName();
                                                            int check = file.getName().length();
                                                            int h = 0;
                                                            String ch = "'";
                                                            char[] c = ch.toCharArray();
                                                            char cc = c[0];
                                                            boolean t = true;
                                                            while(h<check){
                                                                if(chara.charAt(h)==cc){
                                                                    String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                                                    if(renamedValue != null){
                                                                        File renamingFile = new File(file.getPath());
                                                                        renamingFile.renameTo(new File(file.getParent()+"\\"+renamedValue+"."+ext1));
                                                                            strg[0] = renamedValue;
                                                                            strg[7] = file.getParent()+"\\"+renamedValue+"."+ext1;
                                                                            tf = true;
                                                                            t = true;
                                                                        }else{
                                                                            tf = false;
                                                                            t = false;
                                                                        }
                                                                    }
                                                                    h++;
                                                                }
                                                                if(t){
                                                                    model.addRow(strg);
                                                                }

                                                                folderPath.setText(file.getParent());
                                                                scannedFiles.setText("1 file selected!");

                                                                for(int k = 0; k < jTable2.getRowCount(); k++){
                                                                    totalSize = totalSize + Long.parseLong(String.valueOf(jTable2.getValueAt(k, 1)));
                                                                }

                                                            }
                                                            kilobyte = totalSize;

                                                        }
                                                    } catch (UnsupportedFlavorException ex) {
                                                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                                    } catch (IOException ex) {
                                                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                }
                                            });
                                        }

                                        jLabel1.setText("Folder Path :");

                                        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/ssd_48px.png"))); // NOI18N

                                        jLabel6.setText("Device Scanner :");

                                        jButton3.setText("Add multi");
                                        jButton3.setToolTipText("Add multipile video or music at once");
                                        jButton3.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jButton3ActionPerformed(evt);
                                            }
                                        });

                                        jButton6.setText("Delete");
                                        jButton6.setToolTipText("Delete single row from the table");
                                        jButton6.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jButton6ActionPerformed(evt);
                                            }
                                        });

                                        jButton7.setText("Add imag");
                                        jButton7.setToolTipText("Add Image/ photo of your video center that entertain you");
                                        jButton7.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jButton7ActionPerformed(evt);
                                            }
                                        });

                                        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                                        getContentPane().setLayout(layout);
                                        layout.setHorizontalGroup(
                                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton5)
                                                .addGap(29, 29, 29)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(308, 308, 308)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(title_field, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(95, 95, 95))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addComponent(jLabel5)
                                                        .addGap(29, 29, 29)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel6)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(43, 43, 43))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(folderPath, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                        .addGap(6, 6, 6)
                                                                        .addComponent(scannedFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(197, 197, 197)))
                                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(48, 48, 48)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap(12, Short.MAX_VALUE))
                                        );
                                        layout.setVerticalGroup(
                                            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addContainerGap()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel3))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(title_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jButton5)
                                                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(23, 23, 23)
                                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(39, 39, 39)
                                                        .addComponent(jButton3)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jButton6)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jButton7)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addContainerGap())
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(folderPath)
                                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel6)
                                                            .addComponent(scannedFiles))
                                                        .addContainerGap(34, Short.MAX_VALUE))))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(23, 23, 23))
                                        );

                                        pack();
                                    }// </editor-fold>//GEN-END:initComponents

    
    
    private void title_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_title_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_title_fieldActionPerformed
    File  f1, f;
    String name;
    FileInputStream fis;
    ImageIcon image;
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        tf = false;
        JFileChooser chooser = new JFileChooser();
           chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           File fi2 = new File(priviewPath);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(this);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               folder_path = chooser.getSelectedFile().getPath();
               priviewPath = folder_path;
               folderPath.setText(chooser.getSelectedFile().getPath());
               if(chooser.getSelectedFile().isDirectory()){
                   File[] file = chooser.getSelectedFile().listFiles();
                   if(strings == null){
                       title_field.setText(chooser.getSelectedFile().getName());
                        String chara = chooser.getSelectedFile().getName();
                        int check = chooser.getSelectedFile().getName().length();
                        int i = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        String renamedValue;
                        while(i<check){
                            if(chara.charAt(i)==cc){
                               
                                renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                                if(renamedValue != null){
                                    File renamingFile = new File(chooser.getSelectedFile().getPath());
                                    renamingFile.renameTo(new File(chooser.getSelectedFile().getParent()+"\\"+renamedValue));
                                    title_field.setText(renamedValue);
                                    folderPath.setText(chooser.getSelectedFile().getParent()+"\\"+renamedValue);
                                    tf = true;
                                    JOptionPane.showMessageDialog(this, "Folder "+chooser.getSelectedFile().getName()+ " renamed to " + renamedValue+".\n Please choose the folder again from the file explorar.");
                                }else{
                                    title_field.setText("");
                                    folderPath.setText("");
                                    tf = false;
                                }
                               
                            }
                            i++;
                        }
                     
                   }
               if(!tf){
                   Object[] fils = null;
                   try {
                       fils = Files.walk(Paths.get(chooser.getSelectedFile().getPath())).filter(Files::isRegularFile).toArray();
                            
                       } catch (IOException ex) {
                           JOptionPane.showMessageDialog(this, ex.getMessage());
                       }
                   scannedFiles.setText(fils.length+" file selected!");
               DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
               String[] strg = new String[8];
               int j = 0;
               for(Object files : fils){
                   File newfile = new File(files.toString());
                   String ext2 = "";
                        int d = newfile.getName().lastIndexOf('.');
                        if (d > 0){
                            ext2 = newfile.getName().substring(d+1);
                          }
                     switch (ext2) {
                         case "mp3": case "MP3":
                             case "wav": case "WAV":
                                 case "AAC": case "aac":
                                     case "AC3": case "ac3":
                                         case "AIF": case "aif":
                                             case "AIFF": case "aiff":
                                                 case "AU": case "au":
                                                     case "FLAC": case "flac":
                                                         case "M4A": case "m4a":
                                                             case "MKA": case "mka":
                                                                 case "MP2": case "mp2":
                                                                     case "OGG": case "ogg":
                                                                         case "WMA": case "wma":
                                                                             case "mp4":
                         case "MP4":
                         case "avi":
                         case "AVI":
                         case "mkv":
                         case "MKV":
                         case "mov":
                         case "MOV":
                             case "flv": case "FLV":
                                     case "vob": case "VOB":
                                             case "3gp": case "3GP":
                                                     case "ASF": case "asf":
                                                             case "f4v": case "F4V":
                                                                     case "M4V": case "m4v":
                                                                             case "mpg": case "MPG":
                                                                                     case "MPEG": case "mpeg":
                                                                                             case "dpg": case "DPG":
                                                                                                     case "DV": case "dv":
                                                                                                         
                                                                                                         
                   strg[0] = newfile.getName();
                   String bytes = String.valueOf(newfile.length());
                    long flo_byte = Long.parseLong(bytes);
                    long kilobyte1 = Math.round(flo_byte/1024);
                    strg[1] = (String.valueOf(kilobyte1));

                    String ext1 = "";
                    int i = newfile.getName().lastIndexOf('.');
                    if (i > 0){
                        ext1 = newfile.getName().substring(i+1);
                    }
                    strg[2] = ext1;
                    strg[7] = newfile.getAbsolutePath();
                    String chara = newfile.getName();
                        int check = newfile.getName().length();
                        int h = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        boolean g = true;
                        while(h<check){
                            if(chara.charAt(h)==cc){
                               String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                               if(renamedValue != null){
                               File renamingFile = new File(newfile.getPath());
                               renamingFile.renameTo(new File(folderPath.getText()+"\\"+renamedValue+"."+ext1));
                               strg[0] = renamedValue;
                               strg[7] = folderPath.getText()+"\\"+renamedValue+"."+ext1;
                               tf = true;
                               g = true;
                               }else{
                                   g = false;
                                   tf = false;
                                   }
                            }
                            h++;
                        }
                        if(g){
                            model.addRow(strg);
                        }
                   
                   totalSize = totalSize + newfile.length();
                                                                                                         
                                                                                                         break;
                                                                                                     default:
                                                                                                         break;
                     }
                   
                   
                   
               }
               totalSize = Math.round(totalSize/1024);
               }
               }else{
                   DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          
                   String[] strg = new String[8];
                   strg[0] = chooser.getSelectedFile().getName();
                   
                   String bytes = String.valueOf(chooser.getSelectedFile().length());
                    long flo_byte = Long.parseLong(bytes);
                    long kilobyte1 = Math.round(flo_byte/1024);
                    strg[1] = (String.valueOf(kilobyte1));

                    String ext1 = "";
                    int i = chooser.getSelectedFile().getName().lastIndexOf('.');
                    if (i > 0){
                        ext1 = chooser.getSelectedFile().getName().substring(i+1);
                    }
                    strg[2] = ext1;
                    strg[7] = chooser.getSelectedFile().getAbsolutePath();
                    String chara = chooser.getSelectedFile().getName();
                        int check = chooser.getSelectedFile().getName().length();
                        int h = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        boolean t = true;
                        while(h<check){
                            if(chara.charAt(h)==cc){
                               String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                               if(renamedValue != null){
                               File renamingFile = new File(chooser.getSelectedFile().getPath());
                               renamingFile.renameTo(new File(chooser.getSelectedFile().getParent()+"\\"+renamedValue+"."+ext1));
                               strg[0] = renamedValue;
                               strg[7] = chooser.getSelectedFile().getParent()+"\\"+renamedValue+"."+ext1;
                               tf = true;
                               t = true;
                               }else{
                                   tf = false;
                                   t = false;
                               }
                            }
                            h++;
                        }
                        if(t){
                            model.addRow(strg);
                        }
                   
                   
                   
                   folderPath.setText(chooser.getSelectedFile().getParent());
                   scannedFiles.setText("1 file selected!");
                   
                   
                   for(int k = 0; k < jTable2.getRowCount(); k++){
                       totalSize = totalSize + Long.parseLong(String.valueOf(jTable2.getValueAt(k, 1)));
                   }
                   
               }
               kilobyte = totalSize;
           }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(update){
            Spacecraft spp = new Spacecraft();
            Spacecraft s;
            
                    int id = 0;
            for(int i = 0; i<jTable2.getRowCount(); i++){
                        for(int j = 0; j < jTable2.getColumnCount(); j++){
                            spp.setTitle_field(String.valueOf(jTable2.getValueAt(i, 0)));
                            spp.setSize(Long.valueOf(String.valueOf(jTable2.getValueAt(i, 1))));
                            spp.setFileType(String.valueOf(jTable2.getValueAt(i, 2)));
                            spp.setYear(String.valueOf(jTable2.getValueAt(i, 3)));
                            spp.setLanguage(String.valueOf(jTable2.getValueAt(i, 4)));
                            spp.setSeason(String.valueOf(jTable2.getValueAt(i, 5)));
                            spp.setEpisodes(String.valueOf(jTable2.getValueAt(i, 6)));
                            spp.setMedia_fullPath(String.valueOf(jTable2.getValueAt(i, 7)));
                            try {
                                s = (Spacecraft) Select.quarySingleEpisode(String.valueOf(jTable2.getValueAt(i, 0)));
                                id = s.getId();
                            } catch (SQLException ex) {
                                Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            spp.setId(id);
                        }
                try {
                    Select.episodesUpdate(spp);
                } catch (SQLException ex) {
                    Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(this, "Updated successfully!");
            
        }else{
            boolean check = false; 
        String titl = title_field.getText();
        if("".equals(titl)){
            JOptionPane.showMessageDialog(this, "Please enter the title");
        }else{
            try {
                String fileID = String.valueOf(ids);
                if(ids == 0){
                    
                    PreparedStatement stmt = conn.prepareStatement("insert into medias values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            //setting value for each parameter


if(jTable2.getRowCount()>0){
    int g = 0;
    long sum = 0;
    while(g<jTable2.getRowCount()){
    sum = sum + Long.parseLong(String.valueOf(jTable2.getValueAt(g,1)));
    kilobyte = sum;
    g++;
}
}


String image_fullPath = null;
stmt.setLong(1, 1);
stmt.setString(2, title_field.getText());
stmt.setString(3, year.getText());
stmt.setString(4, "");
stmt.setString(5, "");
stmt.setString(6, "");
stmt.setString(7, "");
stmt.setString(8, "");
stmt.setString(9, genre);
stmt.setString(10, "");
stmt.setString(11, "");
stmt.setString(12, "");
stmt.setString(13, "");
stmt.setString(14, "");
stmt.setString(15, "");
stmt.setString(16, "");
stmt.setString(17, "");
stmt.setString(18, "");
stmt.setString(19, "");
stmt.setString(20, "");
stmt.setString(21, "");
stmt.setString(22, "");
stmt.setString(23, "Images/noimage1.jpg");
stmt.setString(24, folder_path);
stmt.setLong(25, kilobyte);
stmt.setString(26, "");

             PreparedStatement stmtt = conn.prepareStatement("select * from medias");
             ResultSet rs = stmtt.executeQuery();
             
             while(rs.next()){
                 String title = rs.getString("title");
                 if(title == null ? title_field.getText() == null : title.equals(title_field.getText())){
                     check = true;
                     break;
                 }
             }
             if(check){
                 JOptionPane.showMessageDialog(this, "The same folder already exist in the database!");
             }else{
                 stmt.executeUpdate();
                 
                 Spacecraft s = (Spacecraft) Select.quarySingleRow(title_field.getText());
                int id = s.getId();

                fileID = String.valueOf(id);
                 PreparedStatement stmt2 = conn.prepareStatement("insert into serial values(?,?,?,?,?,?,?,?,?,?)");
                    for(int i = 0; i<jTable2.getRowCount(); i++){
                        for(int j = 0; j < jTable2.getColumnCount(); j++){
                            String value = String.valueOf(jTable2.getValueAt(i, j));
                            stmt2.setLong(1, 1);
                            stmt2.setString(2, fileID);
                            stmt2.setString(j+3, value);
                        }
                        stmt2.executeUpdate();
                    }

                    DefaultTableModel model1 = (DefaultTableModel)jTable2.getModel();
                    model1.setRowCount(0);
                    title_field.setText(null);
                    year.setText(null);
                    JOptionPane.showMessageDialog(this, "Media added successfully!");
             }


                
                }else if(check == false){
                    Select.updateEpisodeKilobyte(ids, kilobyte);
                    Spacecraft s = (Spacecraft) Select.quarySingleRow(title_field.getText());
                    int id = s.getId();

                    fileID = String.valueOf(id);
                        PreparedStatement stmt2 = conn.prepareStatement("insert into serial values(?,?,?,?,?,?,?,?,?,?)");
                        for(int i = 0; i<jTable2.getRowCount(); i++){
                            for(int j = 0; j < jTable2.getColumnCount(); j++){
                                String value = String.valueOf(jTable2.getValueAt(i, j));
                                stmt2.setLong(1, 1);
                                stmt2.setString(2, fileID);
                                stmt2.setString(j+3, value);
                            }
                            stmt2.executeUpdate();
                        }

                        JOptionPane.showMessageDialog(this, "Updated successfully!");
                        DefaultTableModel model1 = (DefaultTableModel)jTable2.getModel();
                        model1.setRowCount(0);
                        title_field.setText(null);
                        year.setText(null);
                }
                

            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }

        
    }//GEN-LAST:event_jButton2ActionPerformed
File fi;
AudioInputStream ais;
Clip clip;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(update){
            title_field.setText(strings);
            try {
                DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                String[] strg = new String[8];
                Spacecraft s = (Spacecraft) Select.quarySingleRow(strings);
                    int id = s.getId();
                    year.setText(s.getYear());
                PreparedStatement stmtt = conn.prepareStatement("select * from serial where serial_id = "+id);
                ResultSet rs = stmtt.executeQuery();
                while(rs.next()){
                    strg[0] = rs.getString("title");
                    strg[1] = rs.getString("sizeof");
                    strg[2] = rs.getString("typeof");
                    strg[3] = rs.getString("yearof");
                    strg[4] = rs.getString("language");
                    strg[5] = rs.getString("season");
                    strg[6] = rs.getString("episode");
                    strg[7] = rs.getString("path");
                    model.addRow(strg);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            try {
                PreparedStatement stmt2 = conn.prepareStatement("select * from aboutYou");
                ResultSet rs2 = stmt2.executeQuery();
                
                while(rs2.next()){
                if(rs2.getRow()>0){
                    imageFullPath = rs2.getString("imagePath");
                    if(imageFullPath == null){
                        imageFullPath = System.getProperty("user.dir")+"/Images/Album.png";
                    }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
        if(strings != null){
        title_field.setText(strings);
        }else{
            
            try {
                PreparedStatement stmt2 = conn.prepareStatement("select * from aboutYou");
                ResultSet rs2 = stmt2.executeQuery();
                
                while(rs2.next()){
                if(rs2.getRow()>0){
                    imageFullPath = rs2.getString("imagePath");
                    if(imageFullPath == null){
                        imageFullPath = System.getProperty("user.dir")+"/Images/Album.png";
                    }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            File photo = new File(imageFullPath);
                   String[] strg = new String[8];
                   strg[0] = photo.getName();
                   
                   String bytes = String.valueOf(photo.length());
                    long flo_byte = Long.parseLong(bytes);
                    long kilobyte1 = Math.round(flo_byte/1024);
                    strg[1] = (String.valueOf(kilobyte1));

                    String ext1 = "";
                    int i = photo.getName().lastIndexOf('.');
                    if (i > 0){
                        ext1 = photo.getName().substring(i+1);
                    }
                    strg[2] = ext1;
                    strg[7] = photo.getAbsolutePath();
                    
                    model.addRow(strg);
                    
                   for(int k = 0; k < jTable2.getRowCount(); k++){
                       totalSize = totalSize + Long.parseLong(String.valueOf(jTable2.getValueAt(k, 1)));
                   }
                   
        }
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
                if(evt.getKeyChar()==KeyEvent.VK_DELETE){
                     int tablerow = jTable2.getSelectedRow();
                     if(tablerow>-1){
                         DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                         model.removeRow(tablerow);
                     }
                     
                 }
    }//GEN-LAST:event_jTable2KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("video or audio", "mp4", "avi", "mkv", "mp3","mov", "wav","flv","vob","3gp","ASF","f4v","M4V","mpg","MPEG","dpg","DV","AAC","AC3","AIF","AIFF","AU","FLAC","M4A","MKA","MP2","OGG","WMA");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath2);
           chooser.setCurrentDirectory(fi2);
           chooser.setMultiSelectionEnabled(true);
           int returnVal = chooser.showOpenDialog(this);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               File[] filess = chooser.getSelectedFiles();
               priviewPath2 = filess[0].getParent();
               scannedFiles.setText(filess.length + " files selected!");
               DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
               String[] strg = new String[8];
               for(File files : filess){
                   strg[0] = files.getName();
                   String bytes = String.valueOf(files.length());
                    long flo_byte = Long.parseLong(bytes);
                    long kilobyte1 = Math.round(flo_byte/1024);
                    strg[1] = (String.valueOf(kilobyte1));

                    String ext1 = "";
                    int i = files.getName().lastIndexOf('.');
                    if (i > 0){
                        ext1 = files.getName().substring(i+1);
                    }
                    strg[2] = ext1;
                    strg[7] = files.getAbsolutePath();
                    String chara = files.getName();
                        int check = files.getName().length();
                        int h = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        boolean d = true;
                        while(h<check){
                            if(chara.charAt(h)==cc){
                               String renamedValue = JOptionPane.showInputDialog("Please rename file:"+chara+".\n Don't use Apostrophe(') character.");
                               if(renamedValue != null){
                               File renamingFile = new File(files.getPath());
                               renamingFile.renameTo(new File(folderPath.getText()+"\\"+renamedValue+"."+ext1));
                               strg[0] = renamedValue;
                               strg[7] = folderPath.getText()+"\\"+renamedValue+"."+ext1;
                               tf = true;
                               d = true;
                               }else{
                                   d = false;
                                   tf = false;
                                   }
                            }
                            h++;
                        }
                        if(d){
                            model.addRow(strg);
                        }
                   
                   totalSize = totalSize + files.length();
               }
               totalSize = Math.round(totalSize/1024);
               
           }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
                int tablerow = jTable2.getSelectedRow();
                     if(tablerow>-1){
                         DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
                         model.removeRow(tablerow);
                     }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
            File photo = new File(imageFullPath);
                   String[] strg = new String[8];
                   strg[0] = photo.getName();
                   
                   String bytes = String.valueOf(photo.length());
                    long flo_byte = Long.parseLong(bytes);
                    long kilobyte = Math.round(flo_byte/1024);
                    strg[1] = (String.valueOf(kilobyte));

                    String ext1 = "";
                    int i = photo.getName().lastIndexOf('.');
                    if (i > 0){
                        ext1 = photo.getName().substring(i+1);
                    }
                    strg[2] = ext1;
                    strg[7] = photo.getAbsolutePath();
                    
                    model.addRow(strg);
                        
                   
                   
                   
                   folderPath.setText(photo.getParent());
                   scannedFiles.setText("1 file selected!");
                   
                   
                   for(int k = 0; k < jTable2.getRowCount(); k++){
                       totalSize = totalSize + Long.parseLong(String.valueOf(jTable2.getValueAt(k, 1)));
                   }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         try {
             URI uri = new URI("https://1337x.to/");
                Desktop.getDesktop().browse(uri);
            } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel folderPath;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel scannedFiles;
    private javax.swing.JTextField title_field;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables

    private void selectJList(String listName) {
        switch(listName){
                case "jList1":
                    genre = "Action or Adventure";
                break;
                case "jList2":
                    genre = "Action or Adventure";
                break;
                case "jList3":
                    genre = "Comedy film";
                break;
                case "jList4":
                    genre = "Crime and Gangster";
                break;
                case "jList5":
                    genre = "Drama";
                break;
                case "jList6":
                    genre = "Epics or historical";
                break;
                case "jList7":
                    genre = "Horror";
                break;
                case "jList8":
                    genre = "Musicals and dance";
                break;
                case "jList9":
                    genre = "Science fiction (Sci-Fi)";
                break;
                case "jList10":
                    genre = "War";
                break;
                case "jList11":
                    genre = "Westerns";
                break;
                case "jList12":
                    genre = "Tv shows";
                break;
                case "jList13":
                    genre = "Funny video";
                break;
                case "jList14":
                    genre = "Amazing video";
                break;
                case "jList16":
                    genre = "Adult video";
                break;
                case "jList17":
                    genre = "Music video";
                break;
                case "jList18":
                    genre = "Christian video";
                break;
                case "jList19":
                    genre = "Islamic video";
                break;
                case "jList20":
                    genre = "Other religion video";
                break;
                case "jList21":
                    genre = "Native film";
                break;
                case "jList22":
                    genre = "Native Tv shows";
                break;
                case "jList23":
                    genre = "Native fun video";
                break;
                case "jList24":
                    genre = "Native music video";
                break;
                case "jList25":
                    genre = "Foreign Music / Audio";
                break;
                case "jList26":
                    genre = "Native Music / Audio";
                break;
                case "jList27":
                    genre = "Religion Music / Audio";
                break;
                case "jList28":
                    genre = "Anniversary Music / Audio";
                break;
                case "jList29":
                    genre = "Other";
                break;
                
                default:
                    break;
                
        }
    }

}
