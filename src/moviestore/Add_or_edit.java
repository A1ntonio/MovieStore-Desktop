
package moviestore;

import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import static moviestore.Select.conn;
import static net.ucanaccess.converters.Functions.date;

/**
 *
 * @author user
 */
public class Add_or_edit extends javax.swing.JFrame {

    /**
     * Creates new form Add_or_edit
     */
    Connection conn;
    String string;
    int id;
    boolean tf = false;
    String list;
    File file, f1, f;
    String name;
    FileInputStream fis;
    ImageIcon image;
    String media_fullPath= null;
    private String priviewPath = "C:\\";
    private String priviewPath2 = "C:\\";
    private String priviewPath3 = "C:\\";
    
    public Add_or_edit(String selection, int id, String list) {
        this.list = list;
        this.string = selection;
        this.id = id;
        
        
        conn = (Connection) Connectivity.openConnection();
        initComponents();
        setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        
        if(string == null){
            if(list != null){
                selectJList(list);
            }
            
        }
        
        try {
            PreparedStatement stmt = conn.prepareStatement("select category from category");
            ResultSet rs = stmt.executeQuery();
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.removeAllElements();
            while(rs.next()){
                model.addElement(rs.getString("category"));
            }
            category.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        title_field = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        original_title = new javax.swing.JTextField();
        size = new javax.swing.JTextField();
        fileType = new javax.swing.JTextField();
        length = new javax.swing.JTextField();
        time = new javax.swing.JTextField();
        language = new javax.swing.JTextField();
        season = new javax.swing.JTextField();
        genre = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        subgenre = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        category = new javax.swing.JComboBox<>();
        jButton10 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        content_provider = new javax.swing.JTextField();
        actors = new javax.swing.JTextField();
        diroctors = new javax.swing.JTextField();
        producers = new javax.swing.JTextField();
        writers = new javax.swing.JTextField();
        editors = new javax.swing.JTextField();
        photographer = new javax.swing.JTextField();
        musician = new javax.swing.JTextField();
        publisher = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        arrangement = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        cover_image = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        media_feature = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        scanner = new javax.swing.JLabel();
        folderPath = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        year = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add/ Edit Video");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/folder_movies_icon_7.png")).getImage());
        setMinimumSize(new java.awt.Dimension(1146, 586));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Title");

        title_field.setEditable(false);
        title_field.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
        title_field.setToolTipText("Title");
        title_field.setDragEnabled(true);
        title_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                title_fieldActionPerformed(evt);
            }
        });
        title_field.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt){

                evt.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for(File filee : droppedfile){
                        file = filee;
                        String ext2 = "";
                        int e = filee.getName().lastIndexOf('.');
                        if (e > 0){
                            ext2 = filee.getName().substring(e+1);
                        }
                        switch (ext2) {
                            case "mp3": case "MP3":
                            case "wav": case "WAV":
                            case "AAC": case "aac":
                            case "AC3": case "ac3":
                            case "AIF": case "aif":
                            case "AIFF": case "aiff":
                            case "AU": case "au":
                            case "FLAC": case "flac":
                            case "M4A": case "m4a":
                            case "MKA": case "mka":
                            case "MP2": case "mp2":
                            case "OGG": case "ogg":
                            case "WMA": case "wma":
                            case "mp4":
                            case "MP4":
                            case "avi":
                            case "AVI":
                            case "mkv":
                            case "MKV":
                            case "mov":
                            case "MOV":
                            case "flv": case "FLV":
                            case "vob": case "VOB":
                            case "3gp": case "3GP":
                            case "ASF": case "asf":
                            case "f4v": case "F4V":
                            case "M4V": case "m4v":
                            case "mpg": case "MPG":
                            case "MPEG": case "mpeg":
                            case "dpg": case "DPG":
                            case "DV": case "dv":
                            title_field.setText(filee.getName());
                            media_fullPath = file.getAbsolutePath();
                            priviewPath2 = media_fullPath;
                            folderPath.setText(file.getParent());
                            scanner.setText("1 file selected!");
                            name = file.getName();

                            String bytes = String.valueOf(file.length());
                            long flo_byte = Long.parseLong(bytes);
                            long kilobyte = Math.round(flo_byte/1024);
                            size.setText(String.valueOf(kilobyte));

                            if(ext2.equals("mp3")||ext2.equals("MP3")){
                                try {
                                    Mp3File file11 = new Mp3File(new File(file.getPath()));
                                    if(file11.hasId3v2Tag()){
                                        year.setText(file11.getId3v2Tag().getYear());
                                        original_title.setText(file11.getId3v2Tag().getTitle());
                                        actors.setText(file11.getId3v2Tag().getArtist());
                                        publisher.setText(file11.getId3v2Tag().getPublisher());
                                    }else if(file11.hasId3v1Tag()){
                                        year.setText(file11.getId3v1Tag().getYear());
                                        original_title.setText(file11.getId3v1Tag().getTitle());
                                        actors.setText(file11.getId3v1Tag().getArtist());
                                    }
                                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {

                                }
                            }
                            fileType.setText(ext2);

                            String chara = filee.getName();
                            int check = filee.getName().length();
                            int i = 0;
                            String ch = "'";
                            char[] c = ch.toCharArray();
                            char cc = c[0];
                            while(i<check){
                                if(chara.charAt(i)==cc){
                                    String renamedValue = JOptionPane.showInputDialog("Please rename file: "+chara+".\n   Don't use Apostrophe(') character.");
                                    if(renamedValue != null){
                                        File renamingFile = new File(filee.getPath());
                                        renamingFile.renameTo(new File(filee.getParent()+"\\"+renamedValue+"."+ext2));
                                            title_field.setText(renamedValue);
                                            media_fullPath = filee.getParent()+"\\"+renamedValue+"."+ext2;
                                            tf = true;
                                            break;
                                        }else{
                                            title_field.setText(null);
                                            media_fullPath = "";
                                            folderPath.setText("");
                                            scanner.setText("");
                                            tf = false;
                                            break;
                                        }
                                    }
                                    i++;
                                }

                                time.setText(String.valueOf(date()));
                                break;
                                default:
                                break;
                            }
                        }
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            jLabel3.setText("Year");

            jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

            jLabel1.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel1.setText("Original Title :");

            jLabel4.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel4.setText("Size :");

            jLabel5.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel5.setText("Type of file :");

            jLabel6.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel6.setText("Length :");

            jLabel7.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel7.setText("Modified at :");

            jLabel8.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel8.setText("Language :");

            jLabel9.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel9.setText("Genre :");

            jLabel10.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel10.setText("Season :");

            original_title.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

            size.setEditable(false);

            language.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

            season.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    seasonActionPerformed(evt);
                }
            });

            genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action or Adventure", "Comedy film", "Crime and Gangster", "Drama", "Epics or historical", "Horror", "Musicals and dance", "Science fiction (Sci-Fi)", "War", "Westerns", "Tv shows", "Funny video", "Amazing video", "Adult video", "Music video", "Christian video", "Islamic video", "Other religion video", "Native film", "Native Tv shows", "Native fun video", "Native music video", "Foreign Music / Audio", "Native Music / Audio", "Religion Music / Audio", "Anniversary Music / Audio", "Other" }));
            genre.setToolTipText("Choose genre to list in the start page catagories");
            genre.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    genreItemStateChanged(evt);
                }
            });

            jLabel26.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
            jLabel26.setText("Sub genre :");

            subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action or Adventure Comedy" ,"Action/Adventure Drama" ,"Alien Invasion" ,"Animal" ,"Biker" ,"Blaxploitation" ,"Blockbusters" ,"Buddy" ,"Buddy Cops (or Odd Couple)" ,"Caper" ,
                "Chase Films or Thrillers" ,
                "Comic-Book Action" ,
                "Confined Space Action" ,
                "Conspiracy Thriller (Paranoid" +
                "Thriller)" ,
                "Cop Action" ,
                "Costume Adventures" ,
                "Crime Films" ,
                "Desert Epics" ,
                "Disaster or Doomsday" ,
                "Epic Adventure Films" ,
                "Erotic Thrillers" ,
                "Escape" ,
                "Espionage" ,
                "Exploitation (ie Nunsploitation,"+
                "Naziploitation" ,
                "Family-oriented Adventure" ,
                "Fantasy Adventure" ,
                "Futuristic" ,
                "Girls With Guns" ,
                "Guy Films" ,
                "Heist—Caper Films" ,
                "Heroic Bloodshed Films" ,
                "Historical Spectacles" ,
                "Hong Kong" ,
                "James Bond series" ,
                "Jungle and Safari Epics", "Literature/Folklore Adventure" ,
                "Heroes" ,
                "Martial Arts Action (Kung-Fu)" ,
                "Man- or Woman-In-Peril" ,
                "Man vs. Nature" ,
                "Mountain" ,
                "Period Action Films" ,
                "Political Conspiracies, Thrillers" ,
                "Poliziotteschi (Italian)" ,
                "Prison" ,
                "Psychological Thriller" ,
                "Quest" ,
                "Rape and Revenge Films" ,
                "Road" ,
                "Romantic Adventures" ,
                "Sci-Fi Action/Adventure" ,
                "Samurai" ,
                "Sea Adventures" ,
                "Searches/Expeditions for Lost Continents" ,
                "Serialized films" ,
                "Space Adventures" ,
                "Sports—Action" ,
                "Spy" ,
                "Straight Action/Conflict" ,
                "Super-Heroes" ,
                "Surfing or Surf Films" ,
                "Survival" ,
                "Swashbuckler" ,
                "Sword and Sorcery (or “Sword and Sandal”)" ,
                "(Action) Suspense Thrillers" ,
                "Techno-Thrillers" ,
                "Treasure Hunts" ,
                "Undercover" ,
                "Video Game Movies" ,
                "War Adventure" ,
                "Women in Prison"}));
    subgenre.setToolTipText("Choose appropriate sub genre, that help you for correct searching");
    subgenre.setAutoscrolls(true);

    jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/green_arrow_30px.png"))); // NOI18N

    jLabel11.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel11.setText("Category");

    category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Hollywood", "Bollywood", "Kollywood" }));

    jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/plus_16px.png"))); // NOI18N
    jButton10.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton10ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1)
                .addComponent(jLabel4)
                .addComponent(jLabel5)
                .addComponent(jLabel6)
                .addComponent(jLabel7)
                .addComponent(jLabel8)
                .addComponent(jLabel9)
                .addComponent(jLabel26)
                .addComponent(jLabel10)
                .addComponent(jLabel11))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(language, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileType, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(subgenre, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(original_title, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel27))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(category, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(season, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(15, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(original_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(fileType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(language, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(genre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel26)
                .addComponent(subgenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel10)
                .addComponent(season, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Origin", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

    jLabel12.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel12.setText("Actors/Artists :");

    jLabel13.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel13.setText("Directors :");

    jLabel14.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel14.setText("Producers :");

    jLabel15.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel15.setText("Writers :");

    jLabel16.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel16.setText("Editors :");

    jLabel17.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel17.setText("Photographer :");

    jLabel18.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel18.setText("Musician :");

    jLabel19.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel19.setText("Publisher :");

    jLabel20.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel20.setText("Content Provider :");

    content_provider.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    actors.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    diroctors.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    producers.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    writers.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    editors.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    photographer.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    musician.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    publisher.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    jLabel23.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
    jLabel23.setText("Arrangement :");

    arrangement.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel20)
                .addComponent(jLabel12)
                .addComponent(jLabel13)
                .addComponent(jLabel14)
                .addComponent(jLabel15)
                .addComponent(jLabel16)
                .addComponent(jLabel17)
                .addComponent(jLabel18)
                .addComponent(jLabel19)
                .addComponent(jLabel23))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(content_provider, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(diroctors, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(producers, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(writers, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(editors, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(photographer, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(musician, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(publisher, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(arrangement, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(actors, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(16, 16, 16)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel12)
                .addComponent(actors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel13)
                .addComponent(diroctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel14)
                .addComponent(producers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel15)
                .addComponent(writers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel16)
                .addComponent(editors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel17)
                .addComponent(photographer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel18)
                .addComponent(musician, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel19)
                .addComponent(publisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel20)
                .addComponent(content_provider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel23)
                .addComponent(arrangement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cover Image", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

    jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/image_file_20px.png"))); // NOI18N
    jButton3.setText("Browse");
    jButton3.setToolTipText("Browse cover image");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    cover_image.setToolTipText("You can drag image from your file explorare and drop here");
    cover_image.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
    cover_image.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            cover_imageMouseClicked(evt);
        }
    });

    jLabel22.setText("img  width < 600 & height < 800");

    jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/image_file_20px.png"))); // NOI18N
    jButton7.setText("Sample");
    jButton7.setToolTipText("Sample Images");
    jButton7.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton7ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(cover_image, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE))))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton3)
                .addComponent(jButton7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cover_image, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
            .addComponent(jLabel22)
            .addContainerGap())
    );

    cover_image.setDropTarget(new DropTarget() {
        public synchronized void drop(DropTargetDropEvent evt){

            evt.acceptDrop(DnDConstants.ACTION_COPY);
            try {
                List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                for(File file : droppedfile){
                    String fullPath = file.getAbsolutePath();

                    image_fullPath = fullPath;
                    try {

                        f1 = new File(fullPath);
                        fis = new FileInputStream(f1);
                        try {
                            BufferedImage bi = ImageIO.read(fis);

                            Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                            image = new ImageIcon(scaledImage);
                            cover_image.setIcon(image);
                        } catch (IOException ex) {
                        }
                    } catch (FileNotFoundException ex) {
                    }

                    time.setText(String.valueOf(date()));
                }
            } catch (UnsupportedFlavorException ex) {
            } catch (IOException ex) {
            }
        }
    });

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Media Feature", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N

    media_feature.setColumns(20);
    media_feature.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N
    media_feature.setRows(5);
    jScrollPane1.setViewportView(media_feature);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addContainerGap())
    );

    jButton1.setText("Cancel");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setText("Add");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jButton6.setText("Next");
    jButton6.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton6ActionPerformed(evt);
        }
    });

    jButton8.setText("Previese");
    jButton8.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton8ActionPerformed(evt);
        }
    });

    jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/ssd_48px.png"))); // NOI18N

    jLabel24.setText("Device Scanner :");

    jLabel25.setText("Folder Path :");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(12, 12, 12)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 24, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(37, 37, 37)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(46, 46, 46)
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(folderPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel24)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(scanner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(82, 82, 82)))))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel25)
                                .addComponent(folderPath))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel24)
                                .addComponent(scanner))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Add Detail Information of media here :", jPanel1);

    jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/es_file_explorer_20px.png"))); // NOI18N
    jButton5.setText("File Explorare");
    jButton5.setToolTipText("Choose media from browser");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/download_from_cloud_25px.png"))); // NOI18N
    jButton4.setText("Download from Internet");
    jButton4.setToolTipText("Download from Internet");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    year.setToolTipText("Media created year");

    jButton9.setText("Rename Title");
    jButton9.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton9ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1)
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(164, 164, 164)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(308, 308, 308)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(jButton5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(title_field, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton9)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(95, 95, 95))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(title_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5)
                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jTabbedPane1))
    );

    jTabbedPane1.setDropTarget(new DropTarget() {
        public synchronized void drop(DropTargetDropEvent evt){

            evt.acceptDrop(DnDConstants.ACTION_COPY);
            try {
                List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                for(File filee : droppedfile){
                    String ext2 = "";
                    int e = filee.getName().lastIndexOf('.');
                    if (e > 0){
                        ext2 = filee.getName().substring(e+1);
                    }
                    switch (ext2) {
                        case "mp3": case "MP3":
                        case "wav": case "WAV":
                        case "AAC": case "aac":
                        case "AC3": case "ac3":
                        case "AIF": case "aif":
                        case "AIFF": case "aiff":
                        case "AU": case "au":
                        case "FLAC": case "flac":
                        case "M4A": case "m4a":
                        case "MKA": case "mka":
                        case "MP2": case "mp2":
                        case "OGG": case "ogg":
                        case "WMA": case "wma":
                        case "mp4":
                        case "MP4":
                        case "avi":
                        case "AVI":
                        case "mkv":
                        case "MKV":
                        case "mov":
                        case "MOV":
                        case "flv": case "FLV":
                        case "vob": case "VOB":
                        case "3gp": case "3GP":
                        case "ASF": case "asf":
                        case "f4v": case "F4V":
                        case "M4V": case "m4v":
                        case "mpg": case "MPG":
                        case "MPEG": case "mpeg":
                        case "dpg": case "DPG":
                        case "DV": case "dv":

                        file = filee;
                        title_field.setText(filee.getName());
                        media_fullPath = file.getAbsolutePath();
                        priviewPath2 = media_fullPath;
                        folderPath.setText(file.getParent());
                        scanner.setText("1 file selected!");
                        name = file.getName();

                        String bytes = String.valueOf(file.length());
                        long flo_byte = Long.parseLong(bytes);
                        long kilobyte = Math.round(flo_byte/1024);
                        size.setText(String.valueOf(kilobyte));
                        if(ext2.equals("mp3")||ext2.equals("MP3")){
                            try {
                                Mp3File file11 = new Mp3File(new File(file.getPath()));
                                if(file11.hasId3v2Tag()){
                                    year.setText(file11.getId3v2Tag().getYear());
                                    original_title.setText(file11.getId3v2Tag().getTitle());
                                    actors.setText(file11.getId3v2Tag().getArtist());
                                    publisher.setText(file11.getId3v2Tag().getPublisher());
                                }else if(file11.hasId3v1Tag()){
                                    year.setText(file11.getId3v1Tag().getYear());
                                    original_title.setText(file11.getId3v1Tag().getTitle());
                                    actors.setText(file11.getId3v1Tag().getArtist());
                                }
                            } catch (IOException | UnsupportedTagException | InvalidDataException ex) {

                            }
                        }
                        fileType.setText(ext2);

                        String chara = filee.getName();
                        int check = filee.getName().length();
                        int i = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        while(i<check){
                            if(chara.charAt(i)==cc){
                                String renamedValue = JOptionPane.showInputDialog("Please rename file: "+chara+".\n   Don't use Apostrophe(') character.");
                                if(renamedValue != null){
                                    File renamingFile = new File(filee.getPath());
                                    renamingFile.renameTo(new File(filee.getParent()+"\\"+renamedValue+"."+ext2));
                                        title_field.setText(renamedValue);
                                        media_fullPath = filee.getParent()+"\\"+renamedValue+"."+ext2;
                                        tf = true;
                                        break;
                                    }else{
                                        title_field.setText(null);
                                        media_fullPath = "";
                                        folderPath.setText("");
                                        scanner.setText("");
                                        tf = false;
                                        break;
                                    }
                                }
                                i++;
                            }

                            time.setText(String.valueOf(date()));
                            break;
                            default:
                            break;
                        }
                    }
                } catch (UnsupportedFlavorException ex) {
                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void title_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_title_fieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_title_fieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
          JFileChooser media_chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("video or audio", "mp4", "avi", "mkv", "mp3","mov", "wav","flv","vob","3gp","ASF","f4v","M4V","mpg","MPEG","dpg","DV","AAC","AC3","AIF","AIFF","AU","FLAC","M4A","MKA","MP2","OGG","WMA");
           media_chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath2);
           media_chooser.setCurrentDirectory(fi2);
           int returnVal = media_chooser.showOpenDialog(jTabbedPane1);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               file = media_chooser.getSelectedFile();
               title_field.setText(media_chooser.getSelectedFile().getName());
                media_fullPath = file.getAbsolutePath();
                priviewPath2 = media_fullPath;
                folderPath.setText(file.getParent());
                scanner.setText("1 file selected!");
               name = file.getName();
               
               String bytes = String.valueOf(file.length());
               long flo_byte = Long.parseLong(bytes);
               long kilobyte = Math.round(flo_byte/1024);
               size.setText(String.valueOf(kilobyte));
               String ext1 = "";
               int d = name.lastIndexOf('.');
               if (d > 0){
                   ext1 = name.substring(d+1);
               }
               if(ext1.equals("mp3")||ext1.equals("MP3")){
                   try {
                    Mp3File file11 = new Mp3File(new File(media_chooser.getSelectedFile().getPath()));
                    if(file11.hasId3v2Tag()){
                        year.setText(file11.getId3v2Tag().getYear());
                        original_title.setText(file11.getId3v2Tag().getTitle());
                        actors.setText(file11.getId3v2Tag().getArtist());
                        publisher.setText(file11.getId3v2Tag().getPublisher());
                    }else if(file11.hasId3v1Tag()){
                        year.setText(file11.getId3v1Tag().getYear());
                        original_title.setText(file11.getId3v1Tag().getTitle());
                        actors.setText(file11.getId3v1Tag().getArtist());
                    }
                } catch (IOException | UnsupportedTagException | InvalidDataException ex) {

                }
               }
                

               
               fileType.setText(ext1);
               
               String chara = media_chooser.getSelectedFile().getName();
                        int check = media_chooser.getSelectedFile().getName().length();
                        int i = 0;
                        String ch = "'";
                        char[] c = ch.toCharArray();
                        char cc = c[0];
                        while(i<check){
                            if(chara.charAt(i)==cc){
                               String renamedValue = JOptionPane.showInputDialog("Please rename file: "+chara+".\n   Don't use Apostrophe(') character.");
                               if(renamedValue != null){
                                    File renamingFile = new File(media_chooser.getSelectedFile().getPath());
                                    renamingFile.renameTo(new File(media_chooser.getSelectedFile().getParent()+"\\"+renamedValue+"."+ext1));
                                    title_field.setText(renamedValue);
                                    media_fullPath = media_chooser.getSelectedFile().getParent()+"\\"+renamedValue+"."+ext1;
                                    tf = true;
                                    break;
                               }else{
                                   title_field.setText(null);
                                   media_fullPath = "";
                                   folderPath.setText("");
                                   scanner.setText("");
                                   tf = false;
                                   break;
                               }
                            }
                            i++;
                        }
               
               time.setText(String.valueOf(date()));
               
           }
    }//GEN-LAST:event_jButton5ActionPerformed
           public String image_fullPath=null;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    
        JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "png", "jpg","JPG","PNG","svg","SVG","BMP","bmp","TIF","tif","ICO","ico","DIB","dib","JPEG","jpeg","JPE","jpe","JFIF","jpeg","JPE","jpe","JFIF","jfif","EMF","emf");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(jTabbedPane1);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               file = chooser.getSelectedFile();
               
            String image_fullPath1 = file.getPath();
            priviewPath = image_fullPath1;
            File source = new File(image_fullPath1);
            String location = System.getProperty("user.dir");
            String parentLocation = location+"\\Images";
            image_fullPath = parentLocation+"\\"+file.getName();
            File dest = new File(image_fullPath);
            ExecutorService service = Executors.newFixedThreadPool(3);
            service.submit(new Runnable(){
                public void run(){

            try {

                copyFileUsingStream(source, dest);

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
                }

                   private void copyFileUsingStream(File source, File dest) throws IOException {
                       InputStream is = null;
                        OutputStream os = null;

                    try {

                        is = new FileInputStream(source);
                        os = new FileOutputStream(dest);

                        byte[] buffer = new byte[1024];
                        int length;


                        while((length = is.read(buffer)) > 0){
                            os.write(buffer, 0, length);
                            
                        }

                    } catch (FileNotFoundException ex) {
                    }finally{
                                is.close();
                                os.close();
                                }
                   }
            });
            
            
               name = file.getName();
               try {
               
               f1 = new File(image_fullPath1);
               fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   cover_image.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
               }
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String ss = title_field.getText();
        if("".equals(ss)){
           JOptionPane.showMessageDialog(this, "Please choose a file. Title should not be empity!");
        }else{
            if(id == 0){
            try {
                    PreparedStatement stmt = conn.prepareStatement("insert into medias values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
        //setting value for each parameter

            stmt.setLong(1, 1);
            stmt.setString(2, title_field.getText());
            stmt.setString(3, year.getText());
            stmt.setString(4, original_title.getText());
            stmt.setString(5, fileType.getText());
            stmt.setString(6, length.getText());
            stmt.setString(7, time.getText());
            stmt.setString(8, language.getText());
            stmt.setString(9, genre.getSelectedItem().toString());
            stmt.setString(10, season.getText());
            stmt.setString(11, category.getSelectedItem().toString());
            stmt.setString(12, actors.getText());
            stmt.setString(13, diroctors.getText());
            stmt.setString(14, producers.getText());
            stmt.setString(15, writers.getText());
            stmt.setString(16, editors.getText());
            stmt.setString(17, photographer.getText());
            stmt.setString(18, musician.getText());
            stmt.setString(19, publisher.getText());
            stmt.setString(20, content_provider.getText());
            stmt.setString(21, arrangement.getText());
            stmt.setString(22, media_feature.getText());
            stmt.setString(23, image_fullPath);
            stmt.setString(24, media_fullPath);
            stmt.setLong(25, Long.parseLong(size.getText()));
            stmt.setString(26, subgenre.getSelectedItem().toString());
            
            PreparedStatement stmtt = conn.prepareStatement("select * from medias");
             ResultSet rs = stmtt.executeQuery();
             boolean check = false;
             while(rs.next()){
                 String title = rs.getString("title");
                 if(title == null ? title_field.getText() == null : title.equals(title_field.getText())){
                     check = true;
                     break;
                 }
             }
             if(check){
                 JOptionPane.showMessageDialog(this, "The same file already exist in the database!");
             }else{
                 stmt.executeUpdate();
                 JOptionPane.showMessageDialog(this, "Media added successfully!");
             }
            
            
            title_field.setText("");
            year.setText("");
            original_title.setText("");
            size.setText("");
            fileType.setText("");
            length.setText("");
            time.setText("");
            language.setText("");
            genre.setSelectedIndex(0);
            subgenre.setSelectedIndex(0);
            season.setText("1");
            category.setSelectedIndex(0);
            actors.setText("");
            diroctors.setText("");
            producers.setText("");
            writers.setText("");
            editors.setText("");
            photographer.setText("");
            musician.setText("");
            publisher.setText("");
            content_provider.setText("");
            arrangement.setText("");
            media_feature.setText("");
            image_fullPath = null;
            media_fullPath = null;
                    
            
        } catch (SQLException ex) {
            Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
            System.out.print("error");
        }
        } else{
            Spacecraft sp = new Spacecraft();
                sp.setId(id);
                sp.setTitle_field(title_field.getText());
                sp.setActors(actors.getText());
                sp.setArrangement(arrangement.getText());
                sp.setContent_provider(content_provider.getText());
                sp.setDiroctors(diroctors.getText());
                sp.setEditors(editors.getText());
                sp.setEpisodes(category.getSelectedItem().toString());
                sp.setFileType(fileType.getText());
                sp.setGenre(genre.getSelectedItem().toString());
                sp.setSubgenre(subgenre.getSelectedItem().toString());
                sp.setImage_fullPath(image_fullPath);
                sp.setLanguage(language.getText());
                sp.setLength(length.getText());
                sp.setMedia_feature(media_feature.getText());
                sp.setMedia_fullPath(media_fullPath);
                sp.setMusician(musician.getText());
                sp.setOriginal_title(original_title.getText());
                sp.setPhotographer(photographer.getText());
                sp.setProducers(producers.getText());
                sp.setPublisher(publisher.getText());
                sp.setSeason(season.getText());
                sp.setSize(Long.parseLong(size.getText()));
                sp.setTime(time.getText());
                sp.setWriters(writers.getText());
                sp.setYear(year.getText());
                
                
            try {
                Select.update(sp);
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
            }
            jButton6.setEnabled(true);
            jButton8.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Updated successfully!");
        }
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "png", "jpg","JPG","PNG","svg","SVG","BMP","bmp","TIF","tif","ICO","ico","DIB","dib","JPEG","jpeg","JPE","jpe","JFIF","jpeg","JPE","jpe","JFIF","jfif","EMF","emf");
           chooser.setFileFilter(filter);
           String location = System.getProperty("user.dir");
           File fi2 = new File(location + "\\Images");
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(jPanel1);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               file = chooser.getSelectedFile();
               
            image_fullPath = file.getAbsolutePath();
               name = file.getName();
               try {
               
               f1 = new File(image_fullPath);
               fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   cover_image.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
               }
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
      
    }//GEN-LAST:event_jButton7ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        if(string != null){
            
            try {
                Spacecraft s = (Spacecraft) Select.quarySingleRow(string);
                
                id = s.getId();
                title_field.setText(s.getTitle_field());
                year.setText(s.getYear());
                original_title.setText(s.getOriginal_title());
                size.setText(String.valueOf(s.getSize()));
                fileType.setText(s.getFileType());
                length.setText(s.getLength());
                time.setText(s.getTime());
                language.setText(s.getLanguage());
                genre.setSelectedItem(s.getGenre());
                subgenre.setSelectedItem(s.getSubgenre());
                season.setText(s.getSeason());
                category.setSelectedItem(s.getEpisodes());
                actors.setText(s.getActors());
                diroctors.setText(s.getDiroctors());
                producers.setText(s.getProducers());
                writers.setText(s.getWriters());
                editors.setText(s.getEditors());
                photographer.setText(s.getPhotographer());
                musician.setText(s.getMusician());
                publisher.setText(s.getPublisher());
                content_provider.setText(s.getContent_provider());
                arrangement.setText(s.getArrangement());
                media_feature.setText(s.getMedia_feature());
                image_fullPath = s.getImage_fullPath();
                media_fullPath = s.getMedia_fullPath();
                try {
               
               f1 = new File(image_fullPath);
               fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   cover_image.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
               }
                
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
           }
                
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else{
            jButton6.setEnabled(false);
            jButton8.setEnabled(false);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        try {                                         
            PreparedStatement stmt = conn.prepareStatement("select title from medias");
            ResultSet rs = stmt.executeQuery();
            
            String[] strings = new String[1000];
            int i = 0;
            while(rs.next()){
                strings[i] = rs.getString("title");
                i++;
            }
            
            String nextValue;
            nextValue = "";
            int j = 0;
            
            while(j<strings.length){
                if(strings[j]!=null){
                    
                    if(strings[j].equals(string)){
                    if(j!=0){
                        nextValue = strings[j+1];
                        
                    } else{
                        nextValue = strings[1];
                        jButton8.setEnabled(true);
                    }
                    string = nextValue;
                    if(null == string){
                        string = strings[j-1];
                        jButton6.setEnabled(false);
                        break;
                    } else {
                        string = nextValue;
                        break;
                    }
                    
                }
                   
                }else{
                    string = strings[j-1];
                    jButton6.setEnabled(false);
                    break;
                }
                
                
                j++;
            }
            
            Spacecraft s = (Spacecraft) Select.quarySingleRow(string);
                
                id = s.getId();
                title_field.setText(s.getTitle_field());
                year.setText(s.getYear());
                original_title.setText(s.getOriginal_title());
                size.setText(String.valueOf(s.getSize()));
                fileType.setText(s.getFileType());
                length.setText(s.getLength());
                time.setText(s.getTime());
                language.setText(s.getLanguage());
                genre.setSelectedItem(s.getGenre());
                subgenre.setSelectedItem(s.getSubgenre());
                season.setText(s.getSeason());
                category.setSelectedItem(s.getEpisodes());
                actors.setText(s.getActors());
                diroctors.setText(s.getDiroctors());
                producers.setText(s.getProducers());
                writers.setText(s.getWriters());
                editors.setText(s.getEditors());
                photographer.setText(s.getPhotographer());
                musician.setText(s.getMusician());
                publisher.setText(s.getPublisher());
                content_provider.setText(s.getContent_provider());
                arrangement.setText(s.getArrangement());
                media_feature.setText(s.getMedia_feature());
                image_fullPath = s.getImage_fullPath();
                media_fullPath = s.getMedia_fullPath();
                
                try {
                   if(image_fullPath != null){ 
                    f1 = new File(image_fullPath);
                    fis = new FileInputStream(f1);
                    try {
                        BufferedImage bi = ImageIO.read(fis);
                        Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                        image = new ImageIcon(scaledImage);
                        cover_image.setIcon(image);
                    } catch (IOException ex) {
                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                }
                } catch (SQLException ex) {
            Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {                                         
            jButton6.setEnabled(true);
            PreparedStatement stmt = conn.prepareStatement("select title from medias");
            ResultSet rs = stmt.executeQuery();
            
            String[] strings = new String[1000];
            int i = 0;
            while(rs.next()){
                strings[i] = rs.getString("title");
                i++;
            }
            
            String nextValue = "";
            int j = 0;
            
            while(j<strings.length){
                
                if(strings[j].equals(string)){
                    
                    if(j != 0){
                        nextValue = strings[j-1];
                        
                    } else {
                        nextValue = strings[0];
                        jButton8.setEnabled(false);
                    }
                    string = nextValue;
                    break;
                }
            
                j++;
            }
            
            Spacecraft s = (Spacecraft) Select.quarySingleRow(string);
                
                id = s.getId();
                title_field.setText(s.getTitle_field());
                year.setText(s.getYear());
                original_title.setText(s.getOriginal_title());
                size.setText(String.valueOf(s.getSize()));
                fileType.setText(s.getFileType());
                length.setText(s.getLength());
                time.setText(s.getTime());
                language.setText(s.getLanguage());
                genre.setSelectedItem(s.getGenre());
                subgenre.setSelectedItem(s.getSubgenre());
                season.setText(s.getSeason());
                category.setSelectedItem(s.getEpisodes());
                actors.setText(s.getActors());
                diroctors.setText(s.getDiroctors());
                producers.setText(s.getProducers());
                writers.setText(s.getWriters());
                editors.setText(s.getEditors());
                photographer.setText(s.getPhotographer());
                musician.setText(s.getMusician());
                publisher.setText(s.getPublisher());
                content_provider.setText(s.getContent_provider());
                arrangement.setText(s.getArrangement());
                media_feature.setText(s.getMedia_feature());
                image_fullPath = s.getImage_fullPath();
                media_fullPath = s.getMedia_fullPath();
                
           
                try {
                    
                    f1 = new File(image_fullPath);
                    fis = new FileInputStream(f1);
                    try {
                        BufferedImage bi = ImageIO.read(fis);
                        Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                        image = new ImageIcon(scaledImage);
                        cover_image.setIcon(image);
                    } catch (IOException ex) {
                        Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                }
                } catch (SQLException ex) {
            Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_jButton8ActionPerformed

    private void genreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_genreItemStateChanged
        int index = genre.getSelectedIndex();
        
        switch(index){
            case 0:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action or Adventure Comedy" ,"Action/Adventure Drama" ,"Alien Invasion" ,"Animal" ,"Biker" ,"Blaxploitation" ,"Blockbusters" ,"Buddy" ,"Buddy Cops (or Odd Couple)" ,"Caper" ,
                                                    "Chase Films or Thrillers" ,
                                                    "Comic-Book Action" ,
                                                    "Confined Space Action" ,
                                                    "Conspiracy Thriller (Paranoid" +
                                                    "Thriller)" ,
                                                    "Cop Action" ,
                                                    "Costume Adventures" ,
                                                    "Crime Films" ,
                                                    "Desert Epics" ,
                                                    "Disaster or Doomsday" ,
                                                    "Epic Adventure Films" ,
                                                    "Erotic Thrillers" ,
                                                    "Escape" ,
                                                    "Espionage" ,
                                                    "Exploitation (ie Nunsploitation,"+
                                                    "Naziploitation" ,
                                                    "Family-oriented Adventure" ,
                                                    "Fantasy Adventure" ,
                                                    "Futuristic" ,
                                                    "Girls With Guns" ,
                                                    "Guy Films" ,
                                                    "Heist—Caper Films" ,
                                                    "Heroic Bloodshed Films" ,
                                                    "Historical Spectacles" ,
                                                    "Hong Kong" ,
                                                    "James Bond series" ,
                                                    "Jungle and Safari Epics", "Literature/Folklore Adventure" ,
                                                    "Heroes" ,
                                                    "Martial Arts Action (Kung-Fu)" ,
                                                    "Man- or Woman-In-Peril" ,
                                                    "Man vs. Nature" ,
                                                    "Mountain" ,
                                                    "Period Action Films" ,
                                                    "Political Conspiracies, Thrillers" ,
                                                    "Poliziotteschi (Italian)" ,
                                                    "Prison" ,
                                                    "Psychological Thriller" ,
                                                    "Quest" ,
                                                    "Rape and Revenge Films" ,
                                                    "Road" ,
                                                    "Romantic Adventures" ,
                                                    "Sci-Fi Action/Adventure" ,
                                                    "Samurai" ,
                                                    "Sea Adventures" ,
                                                    "Searches/Expeditions for Lost Continents" ,
                                                    "Serialized films" ,
                                                    "Space Adventures" ,
                                                    "Sports—Action" ,
                                                    "Spy" ,
                                                    "Straight Action/Conflict" ,
                                                    "Super-Heroes" ,
                                                    "Surfing or Surf Films" ,
                                                    "Survival" ,
                                                    "Swashbuckler" ,
                                                    "Sword and Sorcery (or “Sword and Sandal”)" ,
                                                    "(Action) Suspense Thrillers" ,
                                                    "Techno-Thrillers" ,
                                                    "Treasure Hunts" ,
                                                    "Undercover" ,
                                                    "Video Game Movies" ,
                                                    "War Adventure" ,
                                                    "Women in Prison"}));
                break;
            case 1:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Absurd" ,
"Action Comedies" ,
"Anarchic Comedies" ,
"Animals" ,
"Black Comedies (Dark Humour)" ,
"British Humour" ,
"Buddy" ,
"Classic Comedies" ,
"Clown" ,
"Comedy Thrillers" ,
"Comic Criminals" ,
"Coming of Age" ,
"Conceptual" ,
"Crime/Caper Comedies" ,
"“Dumb” Comedies" ,
"Fairy Tale" ,
"Family Comedies" ,
"Farce" ,
"Fish-out-of-water Comedies" ,
"Gross-out Comedies" ,
"Horror Comedies" ,
"Lampoon" ,
"Mafia Comedies" ,
"“Meet-Cute” Screwball or Romantic Comedies" ,
"Military Comedies" ,
"Mock-umentary (Fake Documentary)" ,
"Musical ComediesParenthood Comedies" ,
"Parody" ,
"Political Comedies" ,
"Populist" ,
"Pre-Teen Comedies" ,
"Remarriage Comedies" ,
"Road" ,
"Romantic Comedies (“Rom-Coms”)" ,
"Satire" ,
"School Days" ,
"Screwball Comedies" ,
"Sex Comedies" ,
"Slacker" ,
"Slapstick" ,
"Social-Class Comedies" ,
"Sophisticated Comedies" ,
"Spoofs" ,
"Sports Comedies" ,
"Stand-Up" ,
"Stoner Comedies" ,
"Supernatural Comedies" ,
"Teen/Teen Sex Comedies" ,
"Urban Comedies" ,
"War Comedies" ,
"Western Comedies" ,
"Zombie Comedies"}));
                break;
            case 2:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "“Bad Girl” Movies" ,
                                                                                "Blaxploitation" ,
                                                                                "Buddy Cop" ,
                                                                                "Caper Stories" ,
                                                                                "Cops and Robbers" ,
                                                                                "Courtroom Drama" ,
                                                                                "Crime Comedy or Drama" ,
                                                                                "Detective/Mysteries" ,
                                                                                "Espionage" ,
                                                                                "Femme Fatales" ,
                                                                                "Film Noir" ,
                                                                                "Gangs" ,
                                                                                "Hard-boiled Detective" ,
                                                                                "HeistHood Films" ,
                                                                                "Juvenile Delinquency" ,
                                                                                "Law and Order (Legal)" ,
                                                                                "Lovers on the Run Road FilmsMafia (Gangster), Organized Crime Mob Films\n" ,
                                                                                "Mysteries" ,
                                                                                "Neo-Noir" ,
                                                                                "Outlaw Biker Films" ,
                                                                                "Police/Detective" ,
                                                                                "Post-Noir" ,
                                                                                "Procedurals" ,
                                                                                "Prison" ,
                                                                                "Private-Eye" ,
                                                                                "Suspense Thrillers" ,
                                                                                "Trial Films" ,
                                                                                "True Crime" ,
                                                                                "Vice Films" ,
                                                                                "Victim" ,
                                                                                "Who-dun-its" ,
                                                                                "Women’s Prison Films"}));
                break;
            case 3:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Adaptations, Based upon True" ,
"Stories" ,
"Addiction and/or Alcoholism" ,
"Adventure Drama" ,
"Adult" ,
"African-American" ,
"Americana" ,
"Autobiographies/Biographies" ,
"Biopics (Biographical)" ,
"British Empire" ,
"Buddy Film" ,
"“Chick” Flicks or “Guy-Cry” Films" ,
"Childhood Dramas" ,
"Christmas Films" ,
"Coming-of-Age" ,
"Costume Dramas" ,
"Courtroom Dramas" ,
"Crime Dramas" ,
"Dance" ,
"Diary Films" ,
"Disease/Disability" ,
"Disaster" ,
"Docu-dramas" ,
"Ensemble" ,
"Erotic Drama" ,
"Espionage" ,
"Ethnic Family Saga" ,
"Euro-Spy Films" ,
"“Fallen” Women" ,
"Fantasy Drama" ,
"Feminist" ,
"Film a Clef" ,
"Gay and Lesbian" ,
"Generation Gap" ,
"Hagiographies (Religious Figures)" ,
"Heavenly Drama" ,
"High School" ,
"Holiday Film" ,
"Holocaust" ,
"Hood Film" ,
"Inspirational" ,
"Investigative Reporting" ,
"Legal/Courtroom" ,
"Life StoryLiterary Adaptation" ,
"Love" ,
"Marital Drama" ,
"Medical" ,
"Melodramas (“Women’s Pictures” Tearjerkers or “Weepies”)" ,
"Message Movie" ,
"Musical Drama" ,
"Newspaper" ,
"Nostalgia" ,
"Odd Couple" ,
"Period Film" ,
"Police Drama" ,
"POW Drama" ,
"Presidential Politics or Political" ,
"Dramas" ,
"Prison Drama" ,
"Propaganda" ,
"Prostitution" ,
"Psychological Drama" ,
"Race Relations, Interracial Themes" ,
"Religious" ,
"Resistance" ,
"Reunion" ,
"Road Movie" ,
"Romantic Dramas" ,
"Rural Drama" ,
"Sexual/Erotic (Steamy Romantic Dramas)" ,
"Shakespearean" ,
"Showbiz Dramas" ,
"Slice of Life" ,
"Soap Opera" ,
"Social Problem Film, Social" ,
"Commentaries" ,
"Small-town Life" ,
"Sports Dramas or Biopics" ,
"Supernatural Drama" ,
"Teen (or Youth) Films" ,
"Tragedy" ,
"True Crime Drama" ,
"Urban Drama" ,
"War-Military Drama" ,
"Women’s Friendship" ,
"Youth Culture"}));
                break;
            case 4:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alternate History (What if …?)" ,
"Biblical" ,
"British Empire" ,
"Dark Ages" ,
"Greek Myth" ,
"Hagiographies" ,
"Historical or Biographical Epics (Biopics)" ,
"Indian History" ,
"Literary AdaptationMedieval (Dark Ages)" ,
"“Period Pictures”" ,
"Religious" ,
"Roman Empire" ,
"Romantic Epic" ,
"Sword and Sandal" ,
"War or Westerns (Epic)"}));
                break;
            case 5:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "B-Movie Horror" ,
"Cannibalism or Cannibal Films" ,
"Classic Horror" ,
"Costume Horror" ,
"Creature Features" ,
"Demons or Demonic Possession" ,
"Dracula" ,
"Erotic" ,
"“Found Footage”" ,
"Frankenstein, other Mad Scientists" ,
"Ghosts" ,
"Giallo (European, Italian specifically)" ,
"Gore" ,
"Gothic" ,
"Haunted House, other Hauntings" ,
"Halloween" ,
"Horror Comedy (Humorous)" ,
"HP Lovecraftian" ,
"Macabre" ,
"Man-Made Horrors" ,
"Monsters" ,
"Natural Horror" ,
"OccultOlder-Woman-In-Peril Films (“Psycho-Biddy”/“Hag Horror”/“Hagsploitation”)" ,
"Paranormal" ,
"Post-Apocalyptic (or Apocalyptic) Horror" ,
"Psychic Powers" ,
"Psychological Horror" ,
"Reincarnation" ,
"Sadistic Horror" ,
"Satanic Stories" ,
"Sci-Fi Horror" ,
"Serial Killers" ,
"Sex Horror" ,
"Slashers or “Splatter” Film" ,
"Supernatural Horror" ,
"Survival Horror" ,
"Teen Terror (“Teen Screams”)" ,
"Terror" ,
"Vampires" ,
"Witchcraft" ,
"Wolves, Werewolves" ,
"Zombies"}));
               break;
            case 6:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Animation" ,
"Backstage Musicals" ,
"Ballet" ,
"Beach Party Film" ,
"Musical Biographies" ,
"Broadway Show Musicals" ,
"Comedy Musicals" ,
"Concert Film" ,
"Dance Film" ,
"Dramatic Musicals" ,
"Fairy Tale MusicalsFantasy Musical" ,
"Film-Opera" ,
"Folk Musicals" ,
"Hip-Hop Films" ,
"Operettas" ,
"Rock-umentary" ,
"Romantic Musicals" ,
"Show-Biz Comedy" ,
"Stage Musicals" ,
"Western Musica"}));
                break;
            case 7:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action or Adventure Sci-Fi" ,
"Alien Invasion" ,
"Aliens, Extra-Terrestrial Encounters" ,
"Anime" ,
"AI (Artificial Intelligence)" ,
"Atomic Age" ,
"Classic Sci-Fi" ,
"Creature Films" ,
"Disaster" ,
"Dystopic or Dystopia" ,
"End of World" ,
"Exploration" ,
"Fairy Tales" ,
"Fantasy Films" ,
"50’s Sci-Fi" ,
"“First Contact”" ,
"Futuristic (or Future Noir)" ,
"Galactic Empire" ,
"Lost Worlds" ,
"Mad Scientists" ,
"Militaristic" ,
"Monsters and Mutants" ,
"Mythic Fables or Mythology" ,
"Natural HorrorNear Future" ,
"Other Dimensions" ,
"Outer Space" ,
"Parallel (or Alternate) Universe" ,
"Post-Apocalyptic (or Apocalyptic)" ,
"Pre-historic" ,
"Psychological Sci-Fi" ,
"Pulp" ,
"Punk Sci-Fi (ie Steam Punk, Nano Punk, Atom Punk, Cyber Punk, and so on)" ,
"Religious or Theological" ,
"Robots, Cyborgs and Androids" ,
"Sci-Fi Comedies" ,
"Sci-Fi Horror" ,
"Sci-Fi Thrillers" ,
"Space Opera" ,
"Space or Sci-Fi Westerns" ,
"Speculative" ,
"Star Trek" ,
"Super-Hero Film" ,
"Supernatural" ,
"Tech-Noir" ,
"Time or Space Travel" ,
"Virtual Reality"}));
                break;
            case 8:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Action Combat" ,
"Aerial Combat, Aviation" ,
"Afghanistan-Iraq Conflict" ,
"Anti-War" ,
"Civil War" ,
"Combat" ,
"Escape" ,
"Gulf War" ,
"Historical" ,
"Korean War" ,
"Military" ,
"Military ComedyPrisoner of War (POW)/Escape" ,
"Propaganda" ,
"Resistance" ,
"Revolutionary War" ,
"War-Spy" ,
"Submarine" ,
"Vietnam War", 
"War Adventure" ,
"War Epic" ,
"War Romance" ,
"World War I" ,
"World War II"}));
                break;
            case 9:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Animal" ,
"B-Western" ,
"Biographies" ,
"Cattle Drive" ,
"Cavalry" ,
"Comedy Westerns" ,
"Epic Westerns" ,
"Euro-Westerns" ,
"Frontier" ,
"Gunfighters" ,
"Historical" ,
"Hybrid Westerns (with horror, noir, road movie, martial arts, and so on)" ,
"Indian War or Indian Westerns" ,
"Issue WesternMarshal Westerns" ,
"Military" ,
"Modern Western" ,
"Musical Western" ,
"Outlaws" ,
"Psychological Westerns" ,
"Revenge Westerns" ,
"Revisionist" ,
"Road-Trail Journeys" ,
"Romantic Westerns" ,
"Science-Fiction Westerns" ,
"Shoot-outs" ,
"Space Westerns" ,
"“Spaghetti” Westerns" ,
"Spoof Westerns" ,
"Traditional"}));
                break;
            case 10:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEWS", "Series Drama", "Series comedy Drama", "Series Special Program", "Sport"}));
                break;
            case 11:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Funny video", "Kid", "Animal"}));
                break;
            case 12:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Animal", "Disaster", "Talent", "Amazing video"}));
                break;
            case 13:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hardcore sex video", "Softcore sex video"}));
                break;
            case 14:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Music video", "Love","Dance Hall","Disco","Breakeat","EDM","Electronic","Hip-hop","Rap","Hip-Hop/Ra,","Regae","Pop","Pop Rock","R and B","Rap/Hip-Hop","Latino", "Anniversary music video","Traditional","Miscellaneous"}));
                break;
            case 15:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spiritual song", "Teaching", "Gospel song"}));
                break;
            case 16:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spiritual song", "Teaching", "Islamic music video"}));
                break;
            case 17:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Spiritual song", "Teaching"}));
                break;
            case 18:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Native film/movie","Action", "Romantic", "Sci-Fi","Crime","Action and Crime", "Action and Romantic", "Historical", "Documentary film"}));
                break;
            case 19:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food preparation", "Sport", "NEWS", "Series Drama", "Series special show", "Series Comedy Drama", "Poletical show"}));
                break;
            case 20:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Native funny video", "Kid", "Animal"}));
                break;
            case 21:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Love music video", "Country music video", "Love","Dance Hall","Disco","Breakeat","EDM","Electronic","Hip-hop","Rap","Hip-Hop/Ra,","Regae","Pop","Pop Rock","R and B","Rap/Hip-Hop","Latino", "Anniversary music video","Traditional","Miscellaneous"}));
                break;
            case 22:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Love","Dance Hall","Disco","Breakeat","EDM","Electronic","Hip-hop","Rap","Hip-Hop/Ra,","Regae","Pop","Pop Rock","R and B","Rap/Hip-Hop","Latino", "Anniversary music video","Traditional","Miscellaneous"}));
                break;
            case 23:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Love","Dance Hall","Disco","Breakeat","EDM","Electronic","Hip-hop","Rap","Hip-Hop/Ra,","Regae","Pop","Pop Rock","R and B","Rap/Hip-Hop","Latino", "Anniversary music video","Traditional","Miscellaneous"}));
                break;
            case 24:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Christian","Muslim Or Islamic", "Protestant", "Other religion"}));
                break;
            case 25:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "New year", "Birth day","Easter", "Christmas","Miscellaneous", "Other"}));
                break;
            case 26:
                subgenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Miscellaneous"}));
                break;
            default:
            break;
        }
    }//GEN-LAST:event_genreItemStateChanged

    private void cover_imageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cover_imageMouseClicked
         JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "png", "jpg","JPG","PNG","svg","SVG","BMP","bmp","TIF","tif","ICO","ico","DIB","dib","JPEG","jpeg","JPE","jpe","JFIF","jpeg","JPE","jpe","JFIF","jfif","EMF","emf");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath3);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(jTabbedPane1);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               file = chooser.getSelectedFile();
               
            String image_fullPath1 = file.getPath();
            priviewPath3 = image_fullPath1;
            File source = new File(image_fullPath1);
            String location = System.getProperty("user.dir");
            String parentLocation = location+"\\Images";
            image_fullPath = parentLocation+"\\"+file.getName();
            File dest = new File(image_fullPath);
            ExecutorService service = Executors.newFixedThreadPool(3);
            service.submit(new Runnable(){
                public void run(){

            try {

                copyFileUsingStream(source, dest);

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
                }

                   private void copyFileUsingStream(File source, File dest) throws IOException {
                       InputStream is = null;
                        OutputStream os = null;

                    try {

                        is = new FileInputStream(source);
                        os = new FileOutputStream(dest);

                        byte[] buffer = new byte[1024];
                        int length;


                        while((length = is.read(buffer)) > 0){
                            os.write(buffer, 0, length);
                            
                        }

                    } catch (FileNotFoundException ex) {
                    }finally{
                                is.close();
                                os.close();
                                }
                   }
            });
            
            
               name = file.getName();
               try {
               
               f1 = new File(image_fullPath1);
               fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(cover_image.getWidth(), cover_image.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   cover_image.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
               }
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
    }//GEN-LAST:event_cover_imageMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
             URI uri = new URI("https://1337x.to/");
                Desktop.getDesktop().browse(uri);
            } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Add_or_edit_series.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        if("".equals(title_field.getText())){
            JOptionPane.showMessageDialog(this, "Choose file from browse!");
        } 
        else{
            String renamedValue = JOptionPane.showInputDialog("Rename file:");
            if(renamedValue != null){
                if(!(renamedValue.equals(""))){
                File renamingFile = new File(media_fullPath);
                String name = renamingFile.getName();
                String ext1 = "";
                int d = name.lastIndexOf('.');
                if (d > 0){
                    ext1 = name.substring(d+1);
                }
                renamingFile.renameTo(new File(renamingFile.getParent()+"\\"+renamedValue+"."+ext1));
                title_field.setText(renamedValue);
                media_fullPath = renamingFile.getParent()+"\\"+renamedValue+"."+ext1;
            }
            }
            
        }
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void seasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seasonActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String result = JOptionPane.showInputDialog("Add category");
        if(result!=null){
            category.addItem(result);
            try {
                PreparedStatement stmt = conn.prepareStatement("insert into category values(?,?)");
                
                    stmt.setLong(1, 1);
                    stmt.setString(2, result);
                    stmt.executeUpdate();
                    
            } catch (SQLException ex) {
                Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actors;
    private javax.swing.JTextField arrangement;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JTextField content_provider;
    public javax.swing.JLabel cover_image;
    private javax.swing.JTextField diroctors;
    private javax.swing.JTextField editors;
    private javax.swing.JTextField fileType;
    private javax.swing.JLabel folderPath;
    private javax.swing.JComboBox<String> genre;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField language;
    private javax.swing.JTextField length;
    private javax.swing.JTextArea media_feature;
    private javax.swing.JTextField musician;
    private javax.swing.JTextField original_title;
    private javax.swing.JTextField photographer;
    private javax.swing.JTextField producers;
    private javax.swing.JTextField publisher;
    private javax.swing.JLabel scanner;
    private javax.swing.JTextField season;
    private javax.swing.JTextField size;
    private javax.swing.JComboBox<String> subgenre;
    private javax.swing.JTextField time;
    private javax.swing.JTextField title_field;
    private javax.swing.JTextField writers;
    private javax.swing.JTextField year;
    // End of variables declaration//GEN-END:variables

    private void selectJList(String list) {
        switch(list){
                case "jList1":
                    genre.setSelectedIndex(0);
                break;
                case "jList2":
                    genre.setSelectedIndex(0);
                break;
                case "jList3":
                    genre.setSelectedIndex(1);
                break;
                case "jList4":
                    genre.setSelectedIndex(2);
                break;
                case "jList5":
                    genre.setSelectedIndex(3);
                break;
                case "jList6":
                    genre.setSelectedIndex(4);
                break;
                case "jList7":
                    genre.setSelectedIndex(5);
                break;
                case "jList8":
                    genre.setSelectedIndex(6);
                break;
                case "jList9":
                    genre.setSelectedIndex(7);
                break;
                case "jList10":
                    genre.setSelectedIndex(8);
                break;
                case "jList11":
                    genre.setSelectedIndex(9);
                break;
                case "jList12":
                    genre.setSelectedIndex(10);
                break;
                case "jList13":
                    genre.setSelectedIndex(11);
                break;
                case "jList14":
                    genre.setSelectedIndex(12);
                break;
                case "jList16":
                    genre.setSelectedIndex(13);
                break;
                case "jList17":
                    genre.setSelectedIndex(14);
                break;
                case "jList18":
                    genre.setSelectedIndex(15);
                break;
                case "jList19":
                    genre.setSelectedIndex(16);
                break;
                case "jList20":
                    genre.setSelectedIndex(17);
                break;
                case "jList21":
                    genre.setSelectedIndex(18);
                break;
                case "jList22":
                    genre.setSelectedIndex(19);
                break;
                case "jList23":
                    genre.setSelectedIndex(20);
                break;
                case "jList24":
                    genre.setSelectedIndex(21);
                break;
                case "jList25":
                    genre.setSelectedIndex(22);
                break;
                case "jList26":
                    genre.setSelectedIndex(23);
                break;
                case "jList27":
                    genre.setSelectedIndex(24);
                break;
                case "jList28":
                    genre.setSelectedIndex(25);
                break;
                case "jList29":
                    genre.setSelectedIndex(26);
                break;
                
                default:
                    break;
                
        }
    }

    
}
