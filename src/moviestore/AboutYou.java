
package moviestore;

import java.awt.Image;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author user
 */
public class AboutYou extends javax.swing.JFrame {

    /** Creates new form AboutYou */
    
    File file,f1;
    FileInputStream fis;
    ImageIcon image;
    String image_fullPath = System.getProperty("user.dir")+"/Images/Album.png";
    String name;
    Connection conn = (Connection) Connectivity.openConnection();
    PreparedStatement stmt;
    JFrame frame;
    private String priviewPath = "C:\\";
    
    public AboutYou(JFrame frame) {
        this.frame = frame;
        initComponents();
        setLocationRelativeTo(null);
        
        try {
            this.stmt = conn.prepareStatement("select * from aboutYou");
            ResultSet rs = stmt.executeQuery();
            while(rs.next()){
                if(rs.getRow()>0){
                    folderName.setText(rs.getString("folderName"));
                    infoText.setText(rs.getString("infoText"));
                    String image_fullPath11 = rs.getString("imagePath");
                   
                        if(image_fullPath11 == null){
                             try {
                            f1 = new File(image_fullPath);
                                fis = new FileInputStream(f1);
                                try {
                                    BufferedImage bi = ImageIO.read(fis);
                                    Image scaledImage = bi.getScaledInstance(imageLogo.getWidth(), imageLogo.getHeight(), Image.SCALE_SMOOTH);
                                    image = new ImageIcon(scaledImage);
                                    imageLogo.setIcon(image);
                                } catch (IOException ex) {
                                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }else{
                            try {
                            f1 = new File(image_fullPath11);
                                fis = new FileInputStream(f1);
                                try {
                                    BufferedImage bi = ImageIO.read(fis);
                                    Image scaledImage = bi.getScaledInstance(imageLogo.getWidth(), imageLogo.getHeight(), Image.SCALE_SMOOTH);
                                    image = new ImageIcon(scaledImage);
                                    imageLogo.setIcon(image);
                                } catch (IOException ex) {
                                    Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                                
                }
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        folderName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        imageLogo = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/moviestore/Icons/folder_movies_icon_7.png")).getImage());
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Set your business center information here, to entertain yourself for customers.");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Destination Parent Folder Name :");

        folderName.setFont(new java.awt.Font("Power Geez Unicode2", 0, 12)); // NOI18N

        jLabel3.setText("Something about you/ your business center/ address :    ex:- Email, Phone, or Location...");

        infoText.setColumns(20);
        infoText.setFont(new java.awt.Font("Power Geez Unicode2", 0, 14)); // NOI18N
        infoText.setRows(100);
        infoText.setText("Business center name:-\nAddres:-\nLocation:-\nEmail :-\nPhone :-\nContents:-");
        jScrollPane1.setViewportView(infoText);

        jLabel4.setText("Your business center poster/ logo/ image :");

        imageLogo.setToolTipText("Click here to upload Image");
        imageLogo.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(0, 0, 0)));
        imageLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLogoMouseClicked(evt);
            }
        });

        jLabel5.setText("A Folder will be created in the customer usb drive as a parent folder.   The image will be tranfered into customer usb parent folder as a file.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(folderName))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(imageLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folderName))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        imageLogo.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt){

                evt.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    List<File> droppedfile = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for(File file : droppedfile){
                        String fullPath = file.getAbsolutePath();

                        image_fullPath = fullPath;
                        try {

                            f1 = new File(fullPath);
                            fis = new FileInputStream(f1);
                            try {
                                BufferedImage bi = ImageIO.read(fis);

                                Image scaledImage = bi.getScaledInstance(imageLogo.getWidth(), imageLogo.getHeight(), Image.SCALE_FAST);
                                image = new ImageIcon(scaledImage);
                                imageLogo.setIcon(image);
                            } catch (IOException ex) {
                            }
                        } catch (FileNotFoundException ex) {
                        }

                    }
                } catch (UnsupportedFlavorException ex) {
                } catch (IOException ex) {
                }
            }
        });

        jButton1.setText("Save and Restart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save and Restart Later");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void imageLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLogoMouseClicked
        JFileChooser chooser = new JFileChooser();
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "png", "jpg");
           chooser.setFileFilter(filter);
           File fi2 = new File(priviewPath);
           chooser.setCurrentDirectory(fi2);
           int returnVal = chooser.showOpenDialog(jPanel1);
           if(returnVal == JFileChooser.APPROVE_OPTION){
               file = chooser.getSelectedFile();
               String image_fullPath1 = file.getPath();
               priviewPath = image_fullPath1;
               String ext1 = "";
               int d = file.getName().lastIndexOf('.');
               if (d > 0) {
                   ext1 = file.getName().substring(d + 1);
               }
            File source = new File(image_fullPath1);
            String location = System.getProperty("user.dir");
            String parentLocation = location+"\\Images";
            image_fullPath = parentLocation+"\\"+"Album."+ext1;
            File dest = new File(image_fullPath);
            
            ExecutorService service = Executors.newFixedThreadPool(3);
            service.submit(new Runnable(){
                public void run(){

            try {

                copyFileUsingStream(source, dest);

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
                }

                   private void copyFileUsingStream(File source, File dest) throws IOException {
                       InputStream is = null;
                        OutputStream os = null;

                    try {

                        is = new FileInputStream(source);
                        os = new FileOutputStream(dest);

                        byte[] buffer = new byte[1024];
                        int length;


                        while((length = is.read(buffer)) > 0){
                            os.write(buffer, 0, length);
                            
                        }

                    } catch (FileNotFoundException ex) {
                    }finally{
                                is.close();
                                os.close();
                                }
                   }
            });
            
            
               name = file.getName();
               try {
               f1 = new File(image_fullPath1);
               fis = new FileInputStream(f1);
               try {
                   BufferedImage bi = ImageIO.read(fis);
                   Image scaledImage = bi.getScaledInstance(imageLogo.getWidth(), imageLogo.getHeight(), Image.SCALE_SMOOTH);
                   image = new ImageIcon(scaledImage);
                   imageLogo.setIcon(image);
               } catch (IOException ex) {
                   Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
               }
           } catch (FileNotFoundException ex) {
               Logger.getLogger(Add_or_edit.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
    }//GEN-LAST:event_imageLogoMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String folder_name;
        String imageFullPath;
        if("".equals(folderName)){
            folder_name = "Infinity Movie Store";
        }else{
            folder_name = folderName.getText();
        }
        if(image_fullPath == null){
            imageFullPath =  "moviestore/Images/sample_image.jpg";
        }else{
            imageFullPath = image_fullPath;
        }
        String information = infoText.getText();
        
        try {
            PreparedStatement stmt1 = conn.prepareStatement("update aboutYou set folderName = '"+folder_name+"', infoText = '"+information+"', imagePath = '"+imageFullPath+"' where ID = 1");
            stmt1.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(Setting.class.getName()).log(Level.SEVERE, null, ex);
        }
        restart();
        dispose();
        frame.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String folder_name;
        String imageFullPath;
        if("".equals(folderName)){
            folder_name = "Infinity Movie Store";
        }else{
            folder_name = folderName.getText();
        }
        if(image_fullPath == null){
            imageFullPath =  "moviestore/Images/sample_image.jpg";
        }else{
            imageFullPath = image_fullPath;
        }
        String information = infoText.getText();
        
        try {
            PreparedStatement stmt1 = conn.prepareStatement("update aboutYou set folderName = '"+folder_name+"', infoText = '"+information+"', imagePath = '"+imageFullPath+"' where ID = 1");
            stmt1.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(Setting.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField folderName;
    private javax.swing.JLabel imageLogo;
    private javax.swing.JTextArea infoText;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void restart() {
        ExecutorService service = Executors.newFixedThreadPool(20);
                        service.submit(() -> {
                            try {
                                Thread.sleep(1000);
                                Home home = new Home();
                                home.setVisible(true);
                                
                            } catch (InterruptedException ex) {
                                Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);
                            }
        });
    }

}
